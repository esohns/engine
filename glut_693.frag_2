#version 130

// glut_693_common.glsl
#define ZOOM .25
#define EMPTY 1024.
#define FTOV .125
#define VTOP (FTOV*2.)
#define FRC1 4.
#define FRC2 1.

vec4
rand (vec2 u)
{
  return fract(sin(vec4(dot(u,vec2(23.123,87.987)),
                        dot(u,vec2(34.234,96.876)),
                        dot(u,vec2(45.345,15.765)),
                        dot(u,vec2(56.456,24.654))))*45678.7654);
}
// glut_693_common.glsl

uniform vec2 iResolution;
uniform int iFrame;
uniform vec4 iMouse;
uniform sampler2D iChannel0;

void
main ()
{
  vec2 r = 1./iResolution.xy;
  vec2 u = gl_FragCoord.xy;
  vec4 t = texture(iChannel0,u*r).xyzw;
  u = floor(gl_FragCoord.xy*.5)*2.-2.;
  vec2 v = vec2(0.);
  if(iFrame == 0)
  {
    t = rand(gl_FragCoord.xy)*vec4(2.,2.,.02,.02)-vec4(1.,1.,.01,.01);
    if(fract(sin(dot(gl_FragCoord.xy,vec2(12.989,78.233)))*43758.5453)<.9)
      t = vec4(EMPTY);
  }

  if(iMouse.z>0. && length(gl_FragCoord.xy*.5-iMouse.xy*ZOOM) < 4.)
    t = rand(gl_FragCoord.xy)*vec4(2.,2.,.02,.02)-vec4(1.,1.,.01,.01);

  for(float i = .5; i < 6.; ++i)
    for(float j = .5; j < 6.; ++j)
    {
      vec4 m = vec4(j,i,0.,0.);
      vec4 t2 = texture(iChannel0,(u+m.xy)*r).xyzw;
      if(t2.x == EMPTY)
        continue;
      vec4 p = t-t2+vec4(2.,2.,0.,0.)-2.*floor(m*.5);
      vec2 d = p.xy;
      float l = length(d);
      if(l > 2. || l < .0001)
        continue;
      d /= l;
      float c = (2.-l)*FRC1;
      float e = dot(d,p.zw)*FRC2;
      v += d*(c-e);
    }
  t.zw += v*FTOV;
  t.xy += t.zw*VTOP;
  gl_FragColor = t;
}
