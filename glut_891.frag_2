#version 130

// glut_891_common.glsl
#define PI 3.1415926535

#define SAT(x) clamp(x, 0., 1.)

#define TERRAIN_FREQ .1
#define TERRAIN_HEIGHT 3.
#define HQ_OCTAVES 12
#define MQ_OCTAVES 7

#define CAMERA_NEAR .001
#define CAMERA_FAR 200.
#define CAMERA_FOV 75.
#define CAMERA_HEIGHT 1.6
#define CAMERA_PITCH .15
#define CAMERA_ZOOM -2.
#define CAMERA_DEPTH -1125.

#define FOG_B .3
#define FOG_C .1

#define SUN_INTENSITY 6.66
#define SUN_COLOR vec3(1.2, 1., .6)
#define SKY_COLOR vec3(.25, .5, 1.75)
#define SUN_SPEED .04

#define EARTH_RADIUS 6378100. 
#define CLOUD_BOTTOM 3200.
#define CLOUD_TOP 4800.
#define CLOUD_COVERAGE .48
#define CLOUD_BASE_FREQ .00005
#define CLOUD_DETAIL_FREQ .0015
#define CLOUD_STEPS 18
#define CLOUD_LIGHT_STEPS 6
#define CLOUD_TOP_OFFSET 250.
#define CLOUD_ABSORPTION_TOP 1.8
#define CLOUD_ABSORPTION_BOTTOM 3.6

#define WIND_DIR vec3(.4, .1, 1.)
#define WIND_SPEED 75.

#define CLOUDS_AMBIENT_TOP vec3(1., 1.2, 1.6)
#define CLOUDS_AMBIENT_BOTTOM vec3(.6, .4, .8)

#define BAYER_LIMIT 16
#define BAYER_LIMIT_H 4

const int bayerFilter[BAYER_LIMIT] = int[]
(
   0,  8,  2, 10,
  12,  4, 14,  6,
   3, 11,  1,  9,
  15,  7, 13,  5
);

struct Ray
{
  vec3 origin, direction;   
};
    
float
remap (float x, float a, float b, float c, float d)
{
  return (((x - a) / (b - a)) * (d - c)) + c;
}

float
remap01 (float x, float a, float b)
{
  return ((x - a) / (b - a));   
}

bool
writeToPixel (vec2 fragCoord, int iFrame_)
{
  ivec2 iFragCoord = ivec2(fragCoord);
  int index = iFrame_ % BAYER_LIMIT;
  return (((iFragCoord.x + BAYER_LIMIT_H * iFragCoord.y) % BAYER_LIMIT) == bayerFilter[index]);
}

mat3
getCameraMatrix (vec3 origin, vec3 target)
{
  vec3 lookAt = normalize(target - origin);
  vec3 right = normalize(cross(lookAt, vec3(0., 1., 0.)));
  vec3 up = normalize(cross(right, lookAt));
  return mat3(right, up, -lookAt);
}

Ray
getCameraRay (vec2 uv, float t)
{
  uv *= (CAMERA_FOV / 360.) * PI;
  vec3 origin = vec3(0., CAMERA_HEIGHT, CAMERA_DEPTH);
  vec3 target = vec3(0., origin.y + CAMERA_PITCH,  CAMERA_DEPTH - 1.2);
  mat3 camera = getCameraMatrix(origin, target);
  vec3 direction = normalize(camera * vec3(uv, CAMERA_ZOOM));
  return Ray(origin, direction);
}

vec3
getSun (vec2 mouse, float iTime_)
{
  vec2 sunPos = mouse;
    
  if (mouse.y < -.95)
  {
    sunPos = vec2(cos(mod(iTime_ * SUN_SPEED, PI)) * .7, 0.);
    sunPos.y = 1. - 3.05 * sunPos.x * sunPos.x;
  }

  float sunHeight = (max(0., sunPos.y * .75 + .25));

  return vec3(sunPos, sunHeight);
}

vec3
miePhase (float dist, vec3 sunL)
{
  return max(exp(-pow(dist, .3)) * sunL - .4, 0.);
}

vec3
atmosphericScattering (vec2 uv, vec2 sunPos, bool isSun)
{
  float sunDistance = distance(uv, sunPos);
  float scatterMult = SAT(sunDistance);
  float dist = uv.y;
  dist = (.5 * mix(scatterMult, 1., dist)) / dist;
  vec3 mieScatter = miePhase(sunDistance, vec3(1.)) * SUN_COLOR;
  vec3 color = dist * SKY_COLOR;
  color = max(color, 0.);
  vec3 sun = .0002 / pow(length(uv-sunPos), 1.7) * SUN_COLOR;
    
  color = max(mix(pow(color, .8 - color),
  color / (2. * color + .5 - color * 1.3),
  SAT(sunPos.y * 2.5)), 0.)
  + (isSun ? (sun + mieScatter) : vec3(0.));

  color *=  (pow(1. - scatterMult, 5.) * 10. * SAT(.666 - sunPos.y)) + 1.5;
  float underscatter = distance(sunPos.y, 1.);
  color = mix(color, vec3(0.), SAT(underscatter));

  return color;	
}

#define UI0 1597334673U
#define UI1 3812015801U
#define UI2 uvec2(UI0, UI1)
#define UI3 uvec3(UI0, UI1, 2798796415U)
#define UIF (1. / float(0xffffffffU))

vec3
hash33 (vec3 p)
{
  uvec3 q = uvec3(ivec3(p)) * UI3;
  q = (q.x ^ q.y ^ q.z)*UI3;
  return -1. + 2. * vec3(q) * UIF;
}

float
hash13 (vec3 p)
{
  uvec3 q = uvec3(ivec3(p)) * UI3;
  q *= UI3;
  uint n = (q.x ^ q.y ^ q.z) * UI0;
  return float(n) * UIF;
}

float
hash12 (vec2 p)
{
  uvec2 q = uvec2(ivec2(p)) * UI2;
  uint n = (q.x ^ q.y) * UI0;
  return float(n) * UIF;
}

vec3
valueNoiseDerivative (vec2 x, sampler2D smp)
{
  vec2 f = fract(x);
  vec2 u = f * f * (3. - 2. * f);

#if 1
  ivec2 p = ivec2(floor(x));
  float a = texelFetch(smp, (p + ivec2(0, 0)) & 255, 0).x;
  float b = texelFetch(smp, (p + ivec2(1, 0)) & 255, 0).x;
  float c = texelFetch(smp, (p + ivec2(0, 1)) & 255, 0).x;
  float d = texelFetch(smp, (p + ivec2(1, 1)) & 255, 0).x;
#else    
  vec2 p = floor(x);
  float a = textureLod(smp, (p + vec2(.5, .5)) / 256., 0.).x;
  float b = textureLod(smp, (p + vec2(1.5, .5)) / 256., 0.).x;
  float c = textureLod(smp, (p + vec2(.5, 1.5)) / 256., 0.).x;
  float d = textureLod(smp, (p + vec2(1.5, 1.5)) / 256., 0.).x;
#endif
    
  return vec3(a + (b - a) * u.x + (c - a) * u.y + (a - b - c + d) * u.x * u.y,
              6. * f * (1. - f) * (vec2(b - a, c - a) + (a - b - c + d) * u.yx));
}

float
valueNoise (vec3 x, float freq)
{
  vec3 i = floor(x);
  vec3 f = fract(x);
  f = f * f * (3. - 2. * f);
  
  return mix(mix(mix(hash13(mod(i + vec3(0, 0, 0), freq)),  
                     hash13(mod(i + vec3(1, 0, 0), freq)), f.x),
                 mix(hash13(mod(i + vec3(0, 1, 0), freq)),  
                     hash13(mod(i + vec3(1, 1, 0), freq)), f.x), f.y),
             mix(mix(hash13(mod(i + vec3(0, 0, 1), freq)),  
                     hash13(mod(i + vec3(1, 0, 1), freq)), f.x),
                 mix(hash13(mod(i + vec3(0, 1, 1), freq)),  
                     hash13(mod(i + vec3(1, 1, 1), freq)), f.x), f.y), f.z);
}

float
worleyNoise (vec3 uv, float freq, bool tileable)
{    
  vec3 id = floor(uv);
  vec3 p = fract(uv);
  float minDist = 10000.;
    
  for (float x = -1.; x <= 1.; ++x)
    for(float y = -1.; y <= 1.; ++y)
      for(float z = -1.; z <= 1.; ++z)
      {
        vec3 offset = vec3(x, y, z);
        vec3 h = vec3(0.);
        if (tileable)
          h = hash33(mod(id + offset, vec3(freq))) * .4 + .3;
        else
          h = hash33(id + offset) * .4 + .3;
        h += offset;
        vec3 d = p - h;
        minDist = min(minDist, dot(d, d));
      }
    
  return 1. - minDist;
}

float
perlinFbm (vec3 p, float freq, int octaves)
{
  float G = exp2(-.85);
  float amp = 1.;
  float noise = 0.;
  for (int i = 0; i < octaves; ++i)
  {
    noise += amp * valueNoise(p * freq, freq);
    freq *= 2.;
    amp *= G;
  }
    
  return noise;
}

float
worleyFbm (vec3 p, float freq, bool tileable)
{
  float fbm = worleyNoise(p * freq, freq, tileable) * .625 +
              worleyNoise(p * freq * 2., freq * 2., tileable) * .25 +
              worleyNoise(p * freq * 4., freq * 4., tileable) * .125;
  return max(0., fbm * 1.1 - .1);
}
// glut_891_common.glsl

uniform vec2 iResolution;
uniform float iTime;
uniform int iFrame;
uniform vec4 iMouse;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

const mat2 m2 = mat2(.8, -.6, .6, .8);

float
terrainFbm (vec2 uv, int octaves, sampler2D smp)
{
  vec2  p = uv * TERRAIN_FREQ;
  float a = 0.;
  float b = 1.;
  vec2  d = vec2(0.);
    
  for (int i = 0; i < octaves; ++i)
  {
    vec3 n = valueNoiseDerivative(p, smp);
    d += n.yz;
    a += b * n.x / (1. + dot(d, d));
    b *= .5;
    p = m2 * p * 2.;
  }
    
  a = abs(a) * 2. - 1.;
    
  return smoothstep(-.95, .5, a) * a * TERRAIN_HEIGHT;
}

vec3
calcNormal (vec3 pos, float freq, float t)
{
  vec2 eps = vec2( 0.002 * t, 0.0 );
  int norLod = int(max(5., float(HQ_OCTAVES) - (float(HQ_OCTAVES) - 1.) * t / CAMERA_FAR));
  return normalize( 
    vec3(terrainFbm(pos.xz - eps.xy, norLod, iChannel0) - terrainFbm(pos.xz + eps.xy, norLod, iChannel0),
         2.0 * eps.x,
         terrainFbm(pos.xz - eps.yx, norLod, iChannel0) - terrainFbm(pos.xz + eps.yx, norLod, iChannel0)));
}

float
raymarchShadow (Ray ray)
{
  float shadow = 1.;
  float t = CAMERA_NEAR;
  vec3 p = vec3(0.);
  float h = 0.;
  for(int i = 0; i < 80; ++i)
  {
    p = ray.origin + t * ray.direction;
    h = p.y - terrainFbm(p.xz, MQ_OCTAVES, iChannel0);
    shadow = min(shadow, 8. * h / t);
    t += h;
    if (shadow < 0.001 || p.z > CAMERA_FAR)
      break;
  }
  
  return SAT(shadow);
}

float
raymarchTerrain (Ray ray)
{
  float t = CAMERA_NEAR, h = 0.;
  for (int i = 0; i < 200; ++i)
  {
    vec3 pos = ray.origin + ray.direction * t;
    h = pos.y - terrainFbm(pos.xz, MQ_OCTAVES, iChannel0);
    if (abs(h) < (t * .002) || t > CAMERA_FAR)
      break;
    t += h * .5;
  }
  
  return t;
}

void
main ()
{
  vec2 st = gl_FragCoord.xy / iResolution;
  vec2 uv = (2. * gl_FragCoord.xy - iResolution) / iResolution.y;
  vec2 mouse = (2. * iMouse.xy - iResolution) / iResolution.y;

  bool updatePixel = writeToPixel(gl_FragCoord.xy, iFrame);

  vec4 col = textureLod(iChannel1, st, 0.);
    
  if(updatePixel)
  {
    Ray ray = getCameraRay(uv, iTime);

    float terrainDist = raymarchTerrain(ray);

    vec3 sun = getSun(mouse, iTime);
    vec3 sunDir = normalize(vec3(sun.x, sun.z, -1.));
    vec3 sunHalf = normalize(sunDir+ray.direction);
    float sunDot = max(0., dot(ray.direction, sunDir));

    vec3 terrainNormal = vec3(0.);
        
    col *= 0.;
        
    if (terrainDist > CAMERA_FAR)
    {
      col.rgb += atmosphericScattering(uv * .5 + .225, sun.xy * .5 + .225, true);
      col.gb += .006 - uv.y * .0048;

      float t = iTime * .15;
      float stars = pow(hash12(gl_FragCoord.xy), 4. * iResolution.x);
      float twinkle = sin(t * 3.7 + uv.x - sin(uv.y * 20. + t) * 10.) * 2.;
      twinkle *= cos(uv.y + t * 4.4 - sin(uv.x * 15. + t) * 7.) * 1.5;
      twinkle = twinkle * .5 + .5;
      col += max(0., stars * twinkle * smoothstep(.075, 0., sun.z) * 2.);
    }
    else
    {
      vec3 marchPos = ray.origin + ray.direction * terrainDist;
      terrainNormal += calcNormal(marchPos, TERRAIN_FREQ, terrainDist); 

      vec3 rock = vec3(.1, .1, .08);
      vec3 snow = vec3(.9);
      vec3 grass = vec3(.02, .1, .05);

      vec3 albedo = mix(grass, rock, smoothstep(0., .1 * TERRAIN_HEIGHT, marchPos.y)); 
      albedo = mix(albedo, snow, smoothstep(.4 * TERRAIN_HEIGHT, 1.4 * TERRAIN_HEIGHT, marchPos.y));
      albedo = mix(rock, albedo, smoothstep(.4, .7, terrainNormal.y));

      float terrainShadow = clamp(raymarchShadow(Ray(marchPos - sunDir * .001, sunDir)), 0., 8.) + .2;

      float diffuse = max(dot(sunDir, terrainNormal), 0.) * terrainShadow;
      float specular = SAT(dot(sunHalf, ray.direction));
      float skyAmbient = SAT(.5 + .5 * terrainNormal.y);

      col.rgb += SUN_INTENSITY * SUN_COLOR * diffuse;

      col.rgb += vec3(.5, .7, 1.2) * skyAmbient;

      col.rgb += SUN_COLOR * (SAT(.5 + .5 * dot(normalize(vec3(-sunDir.x, sunDir.y, sunDir.z)), terrainNormal)));

      col.rgb *= albedo;

      col.rgb += SUN_INTENSITY * .4 * SUN_COLOR * diffuse * pow(SAT(specular), 16.);

      float fogMask = FOG_C * exp(-ray.origin.y * FOG_B) * (1. - exp(-pow(terrainDist * FOG_B, 1.5) * ray.direction.y)) / ray.direction.y;
      vec3 fogCol = mix(atmosphericScattering(uv * .5 + .75, sun.xy * .5 + .225, false) * .75, vec3(.8, .6, .3), pow(sunDot, 8.));

      fogCol = mix(vec3(.4, .5, .6), fogCol, smoothstep(0., .1, sun.z));
      col.rgb = mix(col.rgb, fogCol, SAT(fogMask));

      col.rgb *= max(.0, sun.z) + mix(vec3(smoothstep(.1, 0., sun.z)) * terrainNormal.y, fogCol, SAT(fogMask)) * (.012, .024, .048);
    }
    col.a = terrainDist;
  }

  gl_FragColor = col;   
  if (gl_FragCoord.x < 1. && gl_FragCoord.y < 1.)
    gl_FragColor = vec4(iResolution.x, vec3(0.));
}
