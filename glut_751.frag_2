#version 130

uniform vec2 iResolution;
uniform float iTime;
uniform sampler2D iChannel0;

float gResY;

mat2
rot2 (float a)
{
  vec2 v = sin(vec2(1.570796, 0) + a);
  return mat2(v, -v.y, v.x);
}

vec3
tex3D (sampler2D t, vec3 p, vec3 n)
{
  n = max(abs(n), 0.001);
  n /= dot(n, vec3(1));
  vec3 tx = texture(t, p.yz).xyz;
  vec3 ty = texture(t, p.zx).xyz;
  vec3 tz = texture(t, p.xy).xyz;
  return (tx * tx * n.x + ty * ty * n.y + tz * tz * n.z);
}

float
n2D (vec2 p)
{
  vec2 i = floor(p);
  p -= i;
  p *= p * (3. - p * 2.);
  return dot(mat2(fract(sin(vec4(0, 1, 113, 114) + dot(i, vec2(1, 113))) * 43758.5453)) * vec2(1. - p.y, p.y), vec2(1. - p.x, p.x));
}

float
fBm (vec2 p)
{
  return n2D(p) * .57 + n2D(p * 2.) * .28 + n2D(p * 4.) * .15;
}

vec2
hash22 (vec2 p)
{
  float n = sin(dot(p, vec2(1, 113)));
  p = fract(vec2(2097152, 262144) * n);
  return sin(p * 6.2831853 + iTime) * 0.5 + 0.5;
}

float
Voronoi (vec2 p)
{
  vec2 g = floor(p), o;
  p -= g;
  
  vec2 d = vec2(1);

  for (int y = -1; y <= 1; y++)
    for (int x = -1; x <= 1; x++)
    {
            
      o = vec2(x, y);
      o += hash22(g + o) - p;
            
      float h = dot(o, o);
      d.y = max(d.x, min(d.y, h));
      d.x = min(d.x, h);
    }

  return (d.y - d.x);
}

float ggs;

float
bumpFunc (vec2 p)
{
  p = p / 2.25 * 450. / gResY;
  float gs = 1. - (texture(iChannel0, (p)).x);

  ggs = gs;

  gs = mix(gs, smoothstep(0., .1, gs - .275), .75);

  gs = mix(gs, smoothstep(0., .05, ggs - .525), .015);

  float difPat = texture(iChannel0, p * 6., -100.).x;
  difPat = smoothstep(0., .5, difPat - .65);

  gs = mix(gs, difPat, .015);

  return clamp(gs, 0., 1.);
}

vec3
bump (vec3 sp, vec3 sn, float bumpFactor, inout float edge)
{
  vec2 eps = vec2(1. / iResolution.y, 0.);

  float f = bumpFunc(sp.xy);
  float fx = bumpFunc(sp.xy - eps.xy);
  float fy = bumpFunc(sp.xy - eps.yx);

  fx = (fx - f) / eps.x;
  fy = (fy - f) / eps.x;

  sn = normalize(sn + vec3(fx, fy, 0) * bumpFactor);

  eps = vec2(6. / iResolution.y, 0);
  fx = bumpFunc(sp.xy - eps.xy);
  fy = bumpFunc(sp.xy - eps.yx);
  edge = (abs(f * 1. - fx) + abs(f * 1. - fy));

  return sn;
}

float
rayPlane (vec3 p, vec3 o, vec3 n, vec3 rd)
{
  float dn = dot(rd, n), t = 1e8;

  if (abs(dn) > .0001)
  {
    t = dot(p - o, n) / dn;
    t += float(t < 0.) * 1e8;
  }

  return t;
}

void
main ()
{
  gResY = clamp(iResolution.y, 350., 800.);

  vec2 uv = (gl_FragCoord.xy - iResolution.xy * .5) / gResY;

  vec3 rd = normalize(vec3(uv, 1.));
  rd = normalize(vec3(rd.xy, sqrt(rd.z * rd.z - dot(rd.xy, rd.xy) * .05)));

  vec3 ro = vec3(0., 0., -1);

  vec3 sn = normalize(vec3(.05, .07, -1));

  float t = rayPlane(vec3(0), ro, sn, rd);
  vec3 sp = ro + rd * t;

  vec3 lp = vec3(.125, .35, -1);

  sp.xy -= vec2(-1, -.5) * iTime / 8.;
  lp.xy -= vec2(-1, -.5) * iTime / 8.;

  float edge = 0.;
  sn = bump(sp, sn, 0.15, edge);

  float mainPat = bumpFunc(sp.xy);

  vec3 ld = lp - sp;
  float lDist = max(length(ld), 0.001);
  ld /= lDist;

  float atten = min(1. / (1. + lDist * 0.125 + lDist * lDist * 0.05), 1.);
  atten *= smoothstep(0., 1., mainPat * .5 + .5 - .25);

  float diff = max(dot(sn, ld), 0.);
  diff = pow(diff, 2.) * 0.66 + pow(diff, 4.) * 0.34;

  float spec = pow(max(dot(reflect(-ld, sn), -rd), 0.), 64.);

  vec3 texCol = mix(vec3(.5), vec3(.6, .4, .2), dot(sin(sp.xy * 4. - cos(sp.yx * 4.)), vec2(.25)) + .5);
  texCol = mix(vec3(1), texCol, mainPat);

  float difPat2 = texture(iChannel0, sp.xy / 2.25 * 450. / gResY * 6.).x;
  difPat2 = smoothstep(0., .05, -difPat2 + .5);

  texCol = mix(texCol, vec3(0), (1. - smoothstep(0., .05, max(ggs - .525 - .025, -(ggs - .525 + .025)))) * .35);

  texCol = mix(vec3(.6, .48, .42) * (difPat2 * .25 + .75), vec3(1, .45, .05) * 1.5, mainPat) * texCol;

  texCol *= mix(vec3(1), vec3(0), difPat2 * smoothstep(0., .05, ggs - .525) * .6); //.525

  texCol = mix(texCol * 1.5, texCol.xzy / 4., dot(sin(sp.xy * 12. - cos(sp.yx * 8.)), vec2(.2 * .5)) + .2);

  texCol = mix(texCol, texCol.yxz * mix(.2, .7, mainPat), smoothstep(.35, 1., fBm(sp.xy * 7.)) * .7);

  vec3 col = (texCol * (diff * 2. + 0.25) + (texCol * .5 + .5) * vec3(.25, .5, 1) * spec) * atten;
  col += col * vec3(1) * diff * edge;

  vec3 lp2 = lp + vec3(.5, 1.4, -.5);
  vec2 dir = normalize(lp2 - sp).xy * 1. / min(800., iResolution.y);
  float shad = max(1. - bumpFunc(sp.xy + dir * 16.), mainPat);
  float shad2 = max(bumpFunc(sp.xy - dir * 16.), 1. - mainPat);
  shad = min(shad, shad2);

  col *= vec3(1) * (shad * .75 + .25);

  gl_FragColor = vec4(sqrt(min(col, 1.)), 1.);
}
