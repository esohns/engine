#version 130

uniform vec2 iResolution;
uniform sampler2D iChannel0;

float
normpdf (float x, float sigma)
{
  return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;
}

void
main ()
{
  vec2 uv = gl_FragCoord.xy / iResolution.xy;
  vec3 base = vec3(0.);

  const int mSize = 7;
  const int kSize = (mSize-1)/2;
  float kernel[mSize];
  vec3 final_colour = vec3(0.0);
  float depth = texture(iChannel0, uv).a;

  float sigma = mix(0.1, 10., max(0., -.55 + depth*0.2));
  float Z = .0;
  for (int j = 0; j <= kSize; ++j)
    kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);

  for (int j = 0; j < mSize; ++j)
    Z += kernel[j];

  for (int i=-kSize; i <= kSize; ++i)
    for (int j=-kSize; j <= kSize; ++j)
      base += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (gl_FragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;
  vec4 b = vec4(base/(Z*Z), 1.0);

  gl_FragColor = b;
}
