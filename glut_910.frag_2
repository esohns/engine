#version 330

mat2 rot2 (float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }

float
hash21 (vec2 f)
{
  f = mod(f + 16384., 16384.); 
  uvec2 p = floatBitsToUint(f);
  p = 1664525U*(p>>1U^p.yx);
  return float(1103515245U*(p.x^(p.y>>3U)))/float(0xffffffffU);
}

float
hash31 (vec3 f)
{
  uvec3 p = floatBitsToUint(f);
  p = 1103515245U*((p >> 2U)^(p.yzx>>1U)^p.zxy);
  uint h32 = 1103515245U*(((p.x)^(p.y>>3U))^(p.z>>6U));

  uint n = h32^(h32 >> 16);
  return float(n & uint(0x7fffffffU))/float(0x7fffffff);
}

const float PI = 3.14159265;

float
D_GGX (float NoH, float roughness)
{
  float alpha = pow(roughness, 4.);
  float b = (NoH*NoH*(alpha - 1.) + 1.);
  return alpha/(PI*b*b);
}

float
G1_GGX_Schlick (float NoV, float roughness)
{
  float r = .5 + .5*roughness;
  float k = (r*r)/2.;
  float denom = NoV*(1. - k) + k;
  return max(NoV, .001)/denom;
}

float
G_Smith (float NoV, float NoL, float roughness)
{
  float g1_l = G1_GGX_Schlick(NoL, roughness);
  float g1_v = G1_GGX_Schlick(NoV, roughness);
  return g1_l*g1_v;
}

vec3
BRDF (vec3 col, vec3 n, vec3 l, vec3 v, float type, float rough, float fresRef, vec3 spCol)
{
  vec3 h = normalize(v + l);

  float nv = clamp(dot(n, v), 0., 1.);
  float nl = clamp(dot(n, l), 0., 1.);
  float nh = clamp(dot(n, h), 0., 1.);
  float vh = clamp(dot(v, h), 0., 1.);  

  vec3 f0 = vec3(.16*(fresRef*fresRef)); 
  f0 = mix(f0, col, type);

  vec3 F = f0 + (1. - f0)*pow(1. - vh, 5.);
  float D = D_GGX(nh, rough); 
  float G = G_Smith(nv, nl, rough); 
  vec3 spec = F*D*G/(4.*max(nv, .001));

  vec3 diff = vec3(nl);
  diff *= 1. - F;
  diff *= (1. - type);

  return (col*diff + spCol*spec*PI);
}

uniform vec2 iResolution;
uniform sampler2D iChannel0;

float hash11B (float x) { return fract(sin(mod(x, 6.2831853))*43758.5453); }

vec4
bokeh (sampler2D iCh, vec2 uv)
{
  const float focD = 2.25, coc = 1.25;
  float l = abs(texture(iCh, uv).w - focD) - coc;
  float ra = clamp(l/coc, 0., 2.);

  const int iter = 96;
  float rad = 1.6;
  float r = 1.;
	vec4 tot = vec4(0), div = tot;
  vec2 vangle = vec2(0., rad*.01/sqrt(float(iter)));
#define GA 2.3999632
  const mat2 rot = mat2(cos(GA), sin(GA), -sin(GA), cos(GA));

  vec2 aspect = vec2(iResolution.y/iResolution.x, 1);
  
  for (int i = 0; i<iter; i++)
  {
#if 1
    r += 1./r;
	  vangle = rot*vangle;
    vec4 col = texture(iCh, uv - (r - 1.)*vangle*aspect, iResolution.y/450.*1.5); 
#else
    float fi = float(i) + fract(iTime);
    vec2 rnd2 = vec2(hash11B(fi), hash11B(fi + .1)*6.2831);
    vec2 offs = 6.*sqrt(rnd2.x)*vec2(cos(rnd2.y), sin(rnd2.y));
    offs *= rad;
    vec4 col = texture(iCh, uv - offs/iResolution.xy, iResolution.y/450.*1.5);  
#endif
    vec4 bokeh = pow(col, vec4(4));
	  tot += bokeh*col*col;
	  div += bokeh;
  }

  vec4 colOrig = texture(iCh, uv);
	return mix(colOrig, colOrig*.25 + tot/div*4., ra);
}

void
main ()
{
  vec2 uv = gl_FragCoord.xy/iResolution;

  vec4 col = bokeh(iChannel0, uv);

  col *= pow(16.*uv.x*uv.y*(1. - uv.x)*(1. - uv.y) , 1./16.);

  gl_FragColor = pow(max(col, 0.), vec4(1./2.2));
}
