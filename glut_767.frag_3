#version 330

// glut_767_common.glsl
#define PI 3.14159265
#define dt 0.5
#define R iResolution.xy

#define T(p) texelFetch(iChannel0, ivec2(mod(p,R)), 0)
#define P(p) texture(iChannel0, mod(p,R)/R)
#define C(p) texture(iChannel1, mod(p,R)/R)

#define GS(x) exp(-dot(x,x))
#define GS0(x) exp(-length(x))
#define CI(x) smoothstep(1.0, 0.9, length(x))
#define Dir(ang) vec2(cos(ang), sin(ang))
#define Rot(ang) mat2(cos(ang), sin(ang), -sin(ang), cos(ang))
#define loop(i,x) for(int i = 0; i < x; i++)
#define range(i,a,b) for(int i = a; i <= b; i++)

#define cooling 1.5

float
MF (vec2 dx)
{
  return -GS(0.75*dx) + 0.13*GS(0.4*dx);
}

float
Ha (vec2 x)
{
  return ((x.x >= 0.)?1.:0.)*((x.y >= 0.)?1.:0.);
}

float
Hb (vec2 x)
{
  return ((x.x > 0.)?1.:0.)*((x.y > 0.)?1.:0.);
}

#define PACK(X) ( uint(round(65534.0*clamp(0.5*X.x+0.5, 0., 1.))) + 65535u*uint(round(65534.0*clamp(0.5*X.y+0.5, 0., 1.))) )
#define UNPACK(X) (clamp(vec2(X%65535u, X/65535u)/65534.0, 0.,1.)*2.0 - 1.0)              
#define DECODE(X) UNPACK(floatBitsToUint(X))
#define ENCODE(X) uintBitsToFloat(PACK(X))
// glut_767_common.glsl

uniform vec2 iResolution;
uniform vec4 iMouse;
uniform bvec4 iKeyboard; // space
uniform sampler2D iChannel0;

vec3
hsv2rgb (vec3 c)
{
  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
  rgb = rgb*rgb*(3.0-2.0*rgb);

  return c.z * mix( vec3(1.0), rgb, c.y);
}

#define radius 1.0
#define zoom 0.3

void
main ()
{
  vec4 col;
  vec2 pos = gl_FragCoord.xy;

  if (iKeyboard.x)
  {
    pos = iMouse.xy + pos*zoom - R*zoom*0.5;
  }
  float rho = 0.001;
  vec2 vel = vec2(0., 0.);

  range(i, -2, 2) range(j, -2, 2)
  {
    vec2 tpos = floor(pos) + vec2(i,j);
    vec4 data = T(tpos);

    vec2 X0 = DECODE(data.x) + tpos;
    vec2 V0 = DECODE(data.y);
    float M0 = data.z;
    vec2 dx = X0 - pos;

    float K = GS(dx/radius)/(radius*radius);
    rho += M0*K;
    vel += M0*K*V0;
  }

  vel /= rho;
  vec3 vc = hsv2rgb(vec3(6.*atan(vel.x, vel.y)/(2.*PI), 1.0, rho*length(vel.xy)));
  col.xyz = cos(0.9*vec3(3,2,1)*rho) + 0.*vc;

  gl_FragColor = col;
}
