#version 330

// glut_781_common.glsl
#define PI 3.14159265359
#define NEIGHBOR_DIST 6
#define DIFFUSION     1.12
#define ALIGNMENT     (0.7 + 0.3 * cos(PI * iTime/5.))
#define SEPARATION    (0.7 + 0.3 * cos(PI * iTime/6.))
#define COHESION      (0.7 + 0.3 * cos(PI * iTime/7.))

vec2
clamp_length (vec2 v, float r)
{
  if(length(v) > r) return r * normalize(v);
  return v;
}

uint
pack (vec2 x)
{
  x = 65535.0*clamp(0.5*x+0.5, 0., 1.);
  return uint(round(x.x)) + 65535u*uint(round(x.y));
}

vec2
unpack (uint a)
{
  vec2 x = vec2(a%65535u, a/65535u);
  return clamp(x/65535.0, 0.,1.)*2.0 - 1.0;
}

vec2
decode (float x)
{
  uint X = floatBitsToUint(x);
  return unpack(X); 
}

float
encode (vec2 x)
{
  uint X = pack(x);
  return uintBitsToFloat(X); 
}

struct particle
{
  vec2 X;
  vec2 V;
  float M;
};
    
particle
getParticle (vec4 data, vec2 pos)
{
  particle P;
  if (data == vec4(0)) return P;
  P.X = decode(data.x) + pos;
  P.M = data.y;
  P.V = data.zw;
  return P;
}

vec4
saveParticle (particle P, vec2 pos)
{
  vec2 x = clamp(P.X - pos, vec2(-0.5), vec2(0.5));
  return vec4(encode(x), P.M, P.V);
}

#define ITERATIONS 4

#define HASHSCALE1 .1031
#define HASHSCALE3 vec3(.1031, .1030, .0973)
#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)

float
hash11 (float p)
{
  vec3 p3  = fract(vec3(p) * HASHSCALE1);
  p3 += dot(p3, p3.yzx + 19.19);
  return fract((p3.x + p3.y) * p3.z);
}

float
hash12 (vec2 p)
{
  vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
  p3 += dot(p3, p3.yzx + 19.19);
  return fract((p3.x + p3.y) * p3.z);
}

float
hash13 (vec3 p3)
{
  p3  = fract(p3 * HASHSCALE1);
  p3 += dot(p3, p3.yzx + 19.19);
  return fract((p3.x + p3.y) * p3.z);
}

vec2
hash21 (float p)
{
  vec3 p3 = fract(vec3(p) * HASHSCALE3);
  p3 += dot(p3, p3.yzx + 19.19);
  return fract((p3.xx+p3.yz)*p3.zy);
}

vec2
hash22 (vec2 p)
{
  vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);
  p3 += dot(p3, p3.yzx+19.19);
  return fract((p3.xx+p3.yz)*p3.zy);
}

vec2
hash23 (vec3 p3)
{
  p3 = fract(p3 * HASHSCALE3);
  p3 += dot(p3, p3.yzx+19.19);
  return fract((p3.xx+p3.yz)*p3.zy);
}

vec3
hash31 (float p)
{
  vec3 p3 = fract(vec3(p) * HASHSCALE3);
  p3 += dot(p3, p3.yzx+19.19);
  return fract((p3.xxy+p3.yzz)*p3.zyx); 
}

vec3
hash32 (vec2 p)
{
  vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);
  p3 += dot(p3, p3.yxz+19.19);
  return fract((p3.xxy+p3.yzz)*p3.zyx);
}

vec3
hash33 (vec3 p3)
{
  p3 = fract(p3 * HASHSCALE3);
  p3 += dot(p3, p3.yxz+19.19);
  return fract((p3.xxy + p3.yxx)*p3.zyx);
}

vec4
hash41 (float p)
{
  vec4 p4 = fract(vec4(p) * HASHSCALE4);
  p4 += dot(p4, p4.wzxy+19.19);
  return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}

vec4
hash42 (vec2 p)
{
  vec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);
  p4 += dot(p4, p4.wzxy+19.19);
  return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}

vec4
hash43 (vec3 p)
{
  vec4 p4 = fract(vec4(p.xyzx)  * HASHSCALE4);
  p4 += dot(p4, p4.wzxy+19.19);
  return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}

vec4
hash44 (vec4 p4)
{
  p4 = fract(p4  * HASHSCALE4);
  p4 += dot(p4, p4.wzxy+19.19);
  return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}
// glut_781_common.glsl

uniform vec2 iResolution;
uniform float iTime;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

//#define DEBUG

void
main ()
{
  gl_FragColor = vec4(0,0,0,1);
  vec2 uv = gl_FragCoord.xy / iResolution.xy;

#ifdef DEBUG
  if (uv.x < 0.25)
  {
    vec4 data = textureLod(iChannel0, floor(gl_FragCoord.xy/16.)*16. / iResolution.xy, 4.);
    vec2 vel = data.zw;

    gl_FragColor.rgb = .6 + .6 * cos(atan(vel.y,vel.x) + vec3(0,23,21));

    data = textureLod(iChannel1, gl_FragCoord.xy / iResolution.xy, 4.);
    gl_FragColor.rgb += 60. * length(data.zw);
    return;
  }
#endif

  vec4 data = texture(iChannel0, gl_FragCoord.xy / iResolution.xy);
  particle P = getParticle(data, gl_FragCoord.xy);
  vec2 vel = P.V;

  gl_FragColor.rgb = .6 + .6 * cos(atan(vel.y,vel.x) + vec3(0,23,21));
  gl_FragColor.rgb *= sqrt(clamp(P.M, 0., 1.));

#ifdef DEBUG
  data = texture(iChannel1, gl_FragCoord.xy / iResolution.xy);
  for(int i = -2; i <= 2; i++)
    for(int j = -2; j <= 2; j++)
    {
      vec4 data = texture(iChannel1, (gl_FragCoord.xy + vec2(i,j)) / iResolution.xy);
      if(data.x > 0.001)
      {
        gl_FragColor.rgb += 0.4 * exp(-pow(distance(data.xy, gl_FragCoord.xy), 2.) / 2.);
        return;
      }
    }
#endif
  if (0.00 < uv.y && uv.y < 0.01 && 5.*uv.x < ALIGNMENT)  gl_FragColor += 0.5;
  if (0.01 < uv.y && uv.y < 0.02 && 5.*uv.x < SEPARATION) gl_FragColor += 0.5;
  if (0.02 < uv.y && uv.y < 0.03 && 5.*uv.x < COHESION)   gl_FragColor += 0.5;
}
