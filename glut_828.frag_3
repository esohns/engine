#version 130

uniform vec2 iResolution;
uniform float iTime;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

#define time iTime
#define time2v (((1.0+sin(time + sin(time*0.4+ cos(time*0.1)))))*1.5)
#define time2 (time*2.1 + time2v)

vec2
div (vec2 p, sampler2D smp)
{
  vec2 tx = 1. / iResolution.xy;

  vec4 uv =    textureLod(smp, p, -100.);
  vec4 uv_n =  textureLod(smp, p + vec2(0.0, tx.y), -100.);
  vec4 uv_e =  textureLod(smp, p + vec2(tx.x, 0.0), -100.);
  vec4 uv_s =  textureLod(smp, p + vec2(0.0, -tx.y), -100.);
  vec4 uv_w =  textureLod(smp, p + vec2(-tx.x, 0.0), -100.);

  float div = uv_s.y - uv_n.y - uv_e.x + uv_w.x;
  float div2 = uv_s.w - uv_n.w - uv_e.z + uv_w.z;

  return vec2(div, div2)*1.8;
}

void
main ()
{
  vec2 p = gl_FragCoord.xy / iResolution.xy;

  vec2 dv = div(p, iChannel0);
  vec2 dv2 = div(p, iChannel1);

  dv = pow(abs(dv), vec2(.5))*sign(dv);
  dv = clamp(dv,0.,4.);
  dv2 = pow(abs(dv2), vec2(.5))*sign(dv2);
  dv2 = clamp(dv2,0.,4.);

  float t1 = mod(time2*0.35,4.);
  float t2 = mod(time2*0.35 + 1.,4.);
  float t3 = mod(time2*0.35 + 2.,4.);
  float t4 = mod(time2*0.35 + 3.,4.);

  const float ws = 1.1;
  const float wof = 1.8;

  float x = time; //time*2.1 + ((1.0+sin(time + sin(time*0.4+ cos(time*0.1)))))*1.5
  float drvT = 1.5 * cos(x + sin(0.4*x + cos(0.1*x)))*(cos(0.4*x + cos(0.1*x)) * (0.4 - 0.1*sin(0.1*x)) + 1.0) + 2.1;

  float ofsc = 0.8 + drvT*0.07;
  float t1w = clamp(t1*ws + wof,0.,10.);
  float t2w = clamp(t2*ws + wof,0.,10.);
  float t3w = clamp(t3*ws + wof,0.,10.);
  float t4w = clamp(t4*ws + wof,0.,10.);

  vec3 col = vec3(0);

  col += sqrt(t1)*vec3(0.28,0.19,0.15)*exp2(dv.x*t1w-t1w*ofsc);
  col += sqrt(t2)*vec3(0.1,0.13,0.23)*exp2(dv.y*t2w-t2w*ofsc);
  col += sqrt(t3)*vec3(0.27,0.07,0.07)*exp2(dv2.x*t3w-t3w*ofsc);
  col += sqrt(t4)*vec3(0.1,0.18,0.25)*exp2(dv2.y*t4w-t4w*ofsc);

  col = pow(col, vec3(.6))*1.2;
  col *= smoothstep(0.,1.,col);

  col *= pow(16.0*p.x*p.y*(1.0 - p.x)*(1.0 - p.y), 0.4);

  gl_FragColor = vec4(col, 1.0);
}
