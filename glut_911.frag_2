#version 130

uniform vec2 iResolution;
uniform float iTime;
uniform vec4 iMouse;
uniform sampler2D iChannel0;

#define Flexible       1
#define Rings          0
#define eyeBallSize    ( 1./8. )
#define Sky            1
#define color1         vec3( .2, .8, .3 )
#define color2         vec3( .8, .3, .2 )
#define Extrude        0.008
#define zoOM           ( 8./8. )
#define Speed          ( 2./8. )
#define AA             2

#define epsilon 0.001      
#define maxSteps 500
#define maxDist 2.
#define minDist .001
#define artefactCorr 2.

const float tau  = atan( 1. )*8.;
const float pi   = tau/2.;
const float tauq = tau/4.;
#define c C.rgb
#define res iResolution
#define N( p ) ( 1./zoOM )*( p - res/2. )/min( res.y, res.x )
#define M( m ) mouse( ( m - res/2. )/min( res.y, res.x ) )
#define rot( a ) mat2( cos( a*tau + vec4( 0., tauq, 3.*tauq, 0. ) ) )
#define T ( iTime*Speed )
#define n( x ) ( ( x )/2. + .5 )
#define select( a, b, condition ) ( mix( a, b, step( 0., condition ) ) )
#define hash21( p ) ( fract( sin( dot( p, vec2( 127.1, 311.7 ) ) )*43758.5453 ) )

vec2
mouse (vec2 m)
{
  vec2 s0 = texelFetch( iChannel0, ivec2( 0, 0 ), 0 ).xy;
  vec2 s2 = texelFetch( iChannel0, ivec2( 0, 2 ), 0 ).xy;
  vec2 s3 = texelFetch( iChannel0, ivec2( 0, 3 ), 0 ).xy;
  float f = iMouse.z > 0. ? 1. : 0.;
  return mix( s0, s3 + ( m - s2 ), f );
}

vec2 d_ID;

struct sdfYY
{
  vec2 d;
  float id;
};

sdfYY
add (sdfYY a, sdfYY b)
{
  float pick = step( b.d.x, a.d.x );
  return sdfYY( mix( a.d, b.d, pick ), mix( a.id, b.id, pick ) );
}

sdfYY
sdYinYang (vec3 p, float ratio, float id)
{
  p *= 2.;
  float eyeSize = eyeBallSize;
  float r  = n( ratio ), fr = 1. - r;
  float o     = length( p.xy) - 1.;
  float wave0 = length( p.xy + vec2( 0., fr)) -  r;
  float wave1 = length( p.xy - vec2( 0., r))  -  fr;
  float eye0  = length( p - vec3( 0., r, 0. ) )  - 2.*eyeSize*fr;
  float eye1  = length( p + vec3( 0.0, fr, 0. ) ) - 2.*eyeSize*r;
  if ( p.x > 0. )      o = max( o, -wave0 );
  else if ( o < 0. )   o = min( -o, wave1 );
  float correct = r/24.;
  #if ( Flexible == 0 )
  correct = r/48.;
  #endif
  o = max( o, -eye0 + correct );
  return sdfYY( vec2( o, eye1 ), id );
}

float
opExtrude (vec3 p, float sdf2d, float h)
{
  vec2 w = vec2( sdf2d, abs( p.z ) - h );
  return min( max( w.x,w.y ), 0. ) + length( max( w, 0. ) );
}

vec2
map (vec3 p)
{
  float ratio = sin( T )/2.;
#if ( Flexible == 0 )
  ratio = 0.;
#endif
  vec3 pp = p.yzx;
  pp.zx *= rot( 3./4. );
  p.xy *= rot( T );
  float correction = 0.01;
#if ( Rings == 1 )
  correction = 0.;
#endif
  sdfYY y1 = sdYinYang( p.yxz, ratio, 0. );
  y1.d.x += correction;
  pp.xy *= rot( T );
  sdfYY y2 = sdYinYang( pp.yxz, -ratio, 1. );
  y2.d.x += correction;
  y1.d.x = opExtrude( p,  y1.d.x, Extrude );
  y2.d.x = opExtrude( pp, y2.d.x, Extrude );
  y1.d.x = min( y1.d.x, y1.d.y );
  y2.d.x = min( y2.d.x, y2.d.y );
  sdfYY o = add( y1, y2 );
  return vec2( o.d.x, o.id );
}

vec2
march (vec3 ro, vec3 rd)
{
  float t = 0.;
  vec2 d_ID;
  for( int i = 0; i < maxSteps; i++ )
  {
    vec3 p = ro + rd*t;
    d_ID = map( p );
    t += d_ID.x/artefactCorr;
    if( t > maxDist || abs( d_ID.x ) < minDist )
      break;
  }
  return vec2( t, d_ID.y );
}

vec3
normal (vec3 p)
{
  vec3 ex = vec3( epsilon, 0., 0. );
  vec3 ey = vec3( 0., epsilon, 0. );
  vec3 ez = vec3( 0., 0., epsilon );
  float fx = map( p + ex ).x - map( p - ex ).x;
  float fy = map( p + ey ).x - map( p - ey ).x;
  float fz = map( p + ez ).x - map( p - ez ).x;
  return normalize( vec3( fx, fy, fz ) );
}
    
vec3
cam (vec2 uv, vec3 p, vec3 l, float z)
{
  vec3 ff = normalize( l - p );
  vec3 rr = normalize( cross( vec3( 0., 1., 0. ), ff ) );
  vec3 uu = cross( ff, rr );
  vec3 cc = ff*z;
  return normalize( cc + uv.x*rr + uv.y*uu );
}

float
orenNayarDiffuse (vec3 N, vec3 L, float roughness)
{
  float A = 1. - .5*roughness*roughness/( roughness*roughness + .33 );
  float B = .45*roughness*roughness/(roughness*roughness + .09 );
  float NL = max( dot( N, L ), 0. );
  float theta_r = acos( NL );
  vec3 V = normalize( -L );
  float phi_diff = max( dot(normalize( L - N*NL ), normalize( V - N*dot( N, V ) ) ), 0. );
  return NL*( A + B*phi_diff*sin( theta_r )*tan( theta_r ) );
}

vec3
shadeOrenNayar (vec3 p, vec3 N, vec3 lightPos, vec3 lightColor, float roughness)
{
  vec3 L = normalize( lightPos - p );
  float diff = orenNayarDiffuse( N, L, roughness );
  return lightColor*diff;
}

float
starLayer (vec3 ro, vec3 rd, float R, float spd, vec2 r, float thr, float bri)
{
  vec3 rd2 = rd; rd2.zx *= rot( T*spd );
  float b  = dot( ro, rd2 ),
        cc = dot( ro, ro ) - R*R,
        h  = b*b - cc;
  if ( h > 0. )
  {
    float t = -b + sqrt( h );
    vec3 n = -normalize( ro + rd2*t );
    float u = atan( n.z, n.x )/tau + .5;
    float v = ( 1. - cos( acos( clamp( -n.y, -1., 1. ) ) ) )/2.;
    vec2 g = floor( vec2( u, v )*r );
    vec2 f = fract( vec2( u, v )*r ) - .5;
    return step( thr, hash21( g ) )*smoothstep( 0.03, 0.0, length( f ) )*bri;
  }
  return 0.;
}

vec4
mainImage0 (vec2 POS)
{
  vec4 C;
  vec2 p = N( POS ),
       m = M( iMouse.xy );
  if ( m == vec2( 0. ) ) m -= vec2( .1 );
  vec3 ro = vec3( 0., 0., -1.11 );
  ro.yz *= rot( -m.y*pi + 1. );
  ro.xz *= rot( -m.x*tauq/2. );
  vec3 rd = cam( p, ro, vec3( 0. ), 1. );
  d_ID = march( ro, rd );
  if ( d_ID.x < maxDist )
  {
    vec3 hit = ro + rd*d_ID.x;
    vec3 nrm = normal( hit );
    c = select( color1/16., color2/16., d_ID.y - 1. );
    vec3 lightColor = select( color1, color2, d_ID.y - 1. );
    vec3 lightPos   = vec3( 3., 2., 1. );
    c += shadeOrenNayar( hit, nrm, lightPos, lightColor, .5 );
  }
  else
  {
#if ( Sky == 0 )
    return vec4( 0. );
#endif
    c  = mix( vec3( 0., .0005, 0. ), vec3( .0005, 0., 0.), n( rd.y ) );
    c += starLayer( ro, rd, 15., .04, vec2( 80.,40. ), .9, 3. )*.25;
    c += starLayer( ro, rd, 20., .06, vec2( 70.,35. ), .9, 5. )*.15;
    c += starLayer( ro, rd, 25., .08, vec2( 60.,30. ), .9, 7. )*.1;
    c += starLayer( ro, rd, 30., .10, vec2( 50.,25. ), .9, 9. )*.05;
  }
  return vec4( sqrt( c ), 1. );
}

void
main ()
{
  vec4 O = vec4( 0. );
  vec2 U = gl_FragCoord.xy;
  
  float jitter = 1./float( AA + 1 );
  for ( int k = 0; k < AA*AA; ++k )
    O += mainImage0(U + jitter*vec2( k%AA - AA/2, k/AA - AA/2 ) );
  O /= float( AA*AA );

  gl_FragColor = O;
}