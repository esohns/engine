#version 130

uniform vec2 iResolution;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

#define DISP_SCALE 2.0
#define SAMPLES 64
#define SIGMOID_CONTRAST 12.0
// channels to use for displacement, either xy or zw
#define CH xy

vec3
contrast (vec3 x)
{
  return 1.0 / (1.0 + exp(-SIGMOID_CONTRAST * (x - 0.5)));    
}

vec2
normz (vec2 x)
{
  return x == vec2(0) ? vec2(0) : normalize(x);
}

vec3
sampleWeights (float i)
{
  return vec3 (i * i, 46.6666 * pow ((1.0 - i) * i, 3.0), (1.0 - i) * (1.0 - i));
}

vec3
sampleDisp (vec2 uv, vec2 dispNorm, float disp)
{
  vec3 col = vec3(0);
  const float SD = 1.0 / float(SAMPLES);
  float wl = 0.0;
  vec3 denom = vec3(0);
  for (int i = 0; i < SAMPLES; i++)
  {
    vec3 sw = sampleWeights (wl);
    denom += sw;
    col += sw * texture(iChannel1, uv + dispNorm * disp * wl).xyz;
    wl += SD;
  }

  return col / denom;
}

void
main ()
{
  vec2 texel = 1. / iResolution.xy;
  vec2 uv = gl_FragCoord.xy / iResolution.xy;

  vec2 n  = vec2(0.0, texel.y);
  vec2 e  = vec2(texel.x, 0.0);
  vec2 s  = vec2(0.0, -texel.y);
  vec2 w  = vec2(-texel.x, 0.0);

  vec2 d   = texture(iChannel0, uv).CH;
  vec2 d_n = texture(iChannel0, fract(uv+n)).CH;
  vec2 d_e = texture(iChannel0, fract(uv+e)).CH;
  vec2 d_s = texture(iChannel0, fract(uv+s)).CH;
  vec2 d_w = texture(iChannel0, fract(uv+w)).CH; 

  vec2 db = 0.4 * d + 0.15 * (d_n+d_e+d_s+d_w);

  float ld = length(db);
  vec2 ln = normz(db);

  vec3 col = sampleDisp(uv, ln, DISP_SCALE * ld);

  gl_FragColor = vec4(contrast(col), 1.0);
}
