uniform vec2 iResolution;
uniform float iTime;
uniform int iFrame;
uniform vec4 iMouse;
uniform sampler2D iChannel0;
uniform vec2 iChannel0Resolution;

float PrBoxDf (vec3 p, vec3 b);
mat3 QtToRMat (vec4 q);
vec4 Loadv4 (int idVar);
vec3 HsvToRgb (vec3 c);

#define S_BIG  1  // big/small system - must also change in buffer shaders
#if S_BIG
const int nBall = 512;
#else
const int nBall = 216;
#endif

vec3 vnBall, rdSign, ltDir, hbSize, vnBlk;
float dstFar;
int idObj, idBall;
const float pi = 3.14159;

float ObjDf (vec3 p)
{
  vec4 sLen, rsLen;
  vec3 eWid;
  float dMin, d;
  dMin = dstFar;
  sLen = vec4 (hbSize - 0.5, 0.);
  rsLen = vec4 (sLen.xyz * rdSign, 0.);
  eWid = vec3 (0.04);
  d = min (min (
     PrBoxDf (p - rsLen.xww, eWid + sLen.wyz),
     PrBoxDf (p - rsLen.wyw, eWid + sLen.xwz)),
     PrBoxDf (p - rsLen.wwz, eWid + sLen.xyw));
  if (d < dMin) { dMin = d;  idObj = 1; }
  p = abs (p);
  d = min (min (
     PrBoxDf (p - sLen.wyz, eWid + sLen.xww),
     PrBoxDf (p - sLen.xwz, eWid + sLen.wyw)),
     PrBoxDf (p - sLen.xyw, eWid + sLen.wwz));
  if (d < dMin) { dMin = d;  idObj = 2; }
  return dMin;
}

float ObjRay (vec3 ro, vec3 rd)
{
  float dHit, d;
  dHit = 0.;
  for (int j = 0; j < 60; j ++) {
    d = ObjDf (ro + dHit * rd);
    dHit += d;
    if (d < 0.0005 || dHit > dstFar) break;
  }
  return dHit;
}

vec3 ObjNf (vec3 p)
{
  vec4 v;
  const vec3 e = vec3 (0.0001, -0.0001, 0.);
  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),
     ObjDf (p + e.yxy), ObjDf (p + e.yyx));
  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);
}

float BallHit (vec3 ro, vec3 rd)
{
  vec4 p;
  vec3 u;
  float b, d, w, dMin, rad;
  dMin = dstFar;
  for (int n = 0; n < nBall; n ++) {
    p = Loadv4 (4 + 4 * n);
    u = ro - p.xyz;
    rad = 0.46 * p.w;
    b = dot (rd, u);
    w = b * b - dot (u, u) + rad * rad;
    if (w >= 0.) {
      d = - b - sqrt (w);
      if (d > 0. && d < dMin) {
        dMin = d;
        vnBall = (u + d * rd) / rad;
        idBall = n;
      }
    }
  }
  return dMin;
}

float BallChqr (int idBall, vec3 vnBall)
{
  vec3 u;
  u = vnBall * QtToRMat (Loadv4 (4 + 4 * idBall + 2));
  return step (0., sign (u.y) * sign (u.z) * atan (u.x, u.y));
}

float BlkHit (vec3 ro, vec3 rd)
{
  vec3 v, tm, tp, u;
  float dMin, dn, df;
  dMin = dstFar;
  v = ro / rd;
  tp = (hbSize - 0.44) / abs (rd) - v;
  tm = - tp - 2. * v;
  dn = max (max (tm.x, tm.y), tm.z);
  df = min (min (tp.x, tp.y), tp.z);
  if (df > 0. && dn < df) {
    dMin = dn;
    vnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);
  }
  return dMin;
}

float BlkHitSil (vec3 ro, vec3 rd)
{
  vec3 v, tm, tp;
  float dn, df;
  v = ro / rd;
  tp = (hbSize - 0.44) / abs (rd) - v;
  tm = - tp - 2. * v;
  dn = max (max (tm.x, tm.y), tm.z);
  df = min (min (tp.x, tp.y), tp.z);
  return (df > 0. && dn < df) ? dn : dstFar;
}

vec3 ShowScene (vec3 ro, vec3 rd)
{
  vec3 col, col2, vn, w;
  float dstBall, dstObj, c, spec;
  dstBall = BallHit (ro, rd);
  rdSign = sign (rd);
  dstObj = ObjRay (ro, rd);
  if (min (dstBall, dstObj) < dstFar) {
    if (dstBall < dstObj) {
      vn = vnBall;
      c = 33. * float (idBall) / float (nBall);
      col = HsvToRgb (vec3 (mod (c, 1.), 1. - 0.05 * mod (c, 8.),
         1. - 0.05 * mod (c, 13.)));
      c = mod (c + 33./2., 33.);
      col2 = HsvToRgb (vec3 (mod (c, 1.), 1. - 0.1 * mod (c, 8.),
         1. - 0.05 * mod (c, 13.)));
      col = mix (col, col2, BallChqr (idBall, vnBall));
      spec = 0.5;
    } else if (dstObj < dstFar) {
      ro += rd * dstObj;
      vn = ObjNf (ro);
      if (idObj == 1) {
        w = smoothstep (0., 0.07, abs (fract (5. * ro / hbSize + 0.5) - 0.5));
        col = vec3 (mix (vec3 (0.4, 0.5, 0.5), vec3 (0.6, 0.6, 0.5),
           dot (abs (vn) * w.yzx * w.zxy, vec3 (1.))));
      } else if (idObj == 2) col = vec3 (0.6, 0.6, 0.5);
      spec = 0.2;
    }
    col = col * (0.3 + 0.7 * max (dot (vn, ltDir), 0.)) +
       spec * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.);
    if (BlkHit (ro, rd) < dstFar) col = mix (col,
       vec3 (0.7, 0.7, 0.75) * (0.2 + 0.8 * max (dot (vnBlk, ltDir), 0.)) +
       0.1 * pow (max (0., dot (ltDir, reflect (rd, vnBlk))), 64.),
       pow (1. - abs (dot (rd, vnBlk)), 4.));
  }
  return pow (clamp (col, 0., 1.), vec3 (0.8));
}

void main ()
{
  mat3 vuMat;
  vec4 qtVu;
  vec3 col, rd, ro;
  vec2 canvas, uv, ut;
  float b;
  canvas = iResolution.xy;
  uv = 2. * gl_FragCoord.xy / canvas - 1.;
  uv.x *= canvas.x / canvas.y;
  hbSize = Loadv4 (0).xyz;
  qtVu = Loadv4 (1);
  vuMat = QtToRMat (qtVu);
  b = length (hbSize);
  dstFar = 10. * b;
  rd = normalize (vec3 (uv, 6.6)) * vuMat;
  ro = vec3 (0., 0., - 6. * b) * vuMat;
  ltDir = normalize (vec3 (1., 2., -1.)) * vuMat;
  if (BlkHitSil (ro, rd) < dstFar) col = ShowScene (ro, rd);
  else col = vec3 (0., 0., 0.2 + 0.1 * uv.y);
  gl_FragColor = vec4 (col, 1.);
}

float PrBoxDf (vec3 p, vec3 b)
{
  vec3 d;
  d = abs (p) - b;
  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));
}

mat3 QtToRMat (vec4 q) 
{
  mat3 m;
  float a1, a2, s;
  q = normalize (q);
  s = q.w * q.w - 0.5;
  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;
  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;
  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;
  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;
  return 2. * m;
}

vec3 HsvToRgb (vec3 c)
{
  vec3 p;
  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);
  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);
}

#define txBuf iChannel0
#define txSize iChannel0Resolution

const float txRow = 128.;

vec4 Loadv4 (int idVar)
{
  float fi;
  fi = float (idVar);
  return textureLod (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /
     txSize, 0.0);
}
