#version 330
precision highp float;

// glut_497_common.glsl
const float dissipation 	= 0.95;

const float ballRadius		= 0.06;
const float fogHeigth		= ballRadius * 4.;
const int	nbSlice			= 24;
const float fogSlice		= fogHeigth / float(nbSlice);
const int	nbSphere 		= 3;
const float shadowDensity 	= 25.;
const float fogDensity 		= 20.;
const float lightHeight     = 1.;

const float tau =  radians(360.);

float hash12(vec2 p)
{
  vec3 p3  = fract(vec3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

vec4 hash41(float p)
{
  vec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));
    p4 += dot(p4, p4.wzxy+33.33);
    return fract((p4.xxyz+p4.yzzw)*p4.zywx);
    
}

vec2 rotate(float angle, float radius)
{
    return vec2(cos(angle),-sin(angle)) * radius;
}

bool floorIntersect(in vec3 ro, in vec3 rd, in float floorHeight, out float t) 
{
    ro.y -= floorHeight;
    if(rd.y < -0.01)
    {
        t = ro.y / - rd.y;
        return true;
    }
    return false;
} 

vec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra )
{
    vec3 oc = ro - ce;
    float b = dot( oc, rd );
    float c = dot( oc, oc ) - ra*ra;
    float h = b*b - c;
    if( h<0.0 ) return vec2(-1.0); // no intersection
    h = sqrt( h );
    return vec2( -b-h, -b+h );
}

vec2 boxIntersection( in vec3 ro, in vec3 rd, in vec3 rad, in vec3 center,out vec3 oN ) 
{
    ro -= center;
    vec3 m = 1.0/rd;
    vec3 n = m*ro;
    vec3 k = abs(m)*rad;
    vec3 t1 = -n - k;
    vec3 t2 = -n + k;

    float tN = max( max( t1.x, t1.y ), t1.z );
    float tF = min( min( t2.x, t2.y ), t2.z );
  
    if( tN>tF || tF<0.0) return vec2(-1.0); // no intersection
    
    oN = -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);

    return vec2( tN, tF );
}

vec2 spherePosition(int id, int frame)
{
    vec4 offset = hash41(float(id)) * tau;
    float fframe = float(frame);
    return vec2(cos(offset.x + fframe * 0.015) + cos(offset.y + fframe * 0.020), cos(offset.z + fframe * 0.017) + cos(offset.w + fframe * 0.022)) * vec2(1., 0.5) * 0.9;
}

float dist2(vec3 v)
{
    return dot(v, v);
}
// glut_497_common.glsl

uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

float div(int x,int y)
{
    return texelFetch(iChannel0, ivec2(gl_FragCoord.xy) + ivec2(x,  y) , 0).x;
}

float getDiv( void )
{
    float p = 0.;
    p += 1.*div(-9, 0);
    p += 9.*div(-8, -1);
    p += 4.*div(-8, 0);
    p += 9.*div(-8, 1);
    p += 36.*div(-7, -2);
    p += 32.*div(-7, -1);
    p += 97.*div(-7, 0);
    p += 32.*div(-7, 1);
    p += 36.*div(-7, 2);
    p += 84.*div(-6, -3);
    p += 112.*div(-6, -2);
    p += 436.*div(-6, -1);
    p += 320.*div(-6, 0);
    p += 436.*div(-6, 1);
    p += 112.*div(-6, 2);
    p += 84.*div(-6, 3);
    p += 126.*div(-5, -4);
    p += 224.*div(-5, -3);
    p += 1092.*div(-5, -2);
    p += 1280.*div(-5, -1);
    p += 2336.*div(-5, 0);
    p += 1280.*div(-5, 1);
    p += 1092.*div(-5, 2);
    p += 224.*div(-5, 3);
    p += 126.*div(-5, 4);
    p += 126.*div(-4, -5);
    p += 280.*div(-4, -4);
    p += 1694.*div(-4, -3);
    p += 2752.*div(-4, -2);
    p += 6656.*div(-4, -1);
    p += 6464.*div(-4, 0);
    p += 6656.*div(-4, 1);
    p += 2752.*div(-4, 2);
    p += 1694.*div(-4, 3);
    p += 280.*div(-4, 4);
    p += 126.*div(-4, 5);
    p += 84.*div(-3, -6);
    p += 224.*div(-3, -5);
    p += 1694.*div(-3, -4);
    p += 3520.*div(-3, -3);
    p += 11016.*div(-3, -2);
    p += 16128.*div(-3, -1);
    p += 24608.*div(-3, 0);
    p += 16128.*div(-3, 1);
    p += 11016.*div(-3, 2);
    p += 3520.*div(-3, 3);
    p += 1694.*div(-3, 4);
    p += 224.*div(-3, 5);
    p += 84.*div(-3, 6);
    p += 36.*div(-2, -7);
    p += 112.*div(-2, -6);
    p += 1092.*div(-2, -5);
    p += 2752.*div(-2, -4);
    p += 11016.*div(-2, -3);
    p += 21664.*div(-2, -2);
    p += 47432.*div(-2, -1);
    p += 59712.*div(-2, 0);
    p += 47432.*div(-2, 1);
    p += 21664.*div(-2, 2);
    p += 11016.*div(-2, 3);
    p += 2752.*div(-2, 4);
    p += 1092.*div(-2, 5);
    p += 112.*div(-2, 6);
    p += 36.*div(-2, 7);
    p += 9.*div(-1, -8);
    p += 32.*div(-1, -7);
    p += 436.*div(-1, -6);
    p += 1280.*div(-1, -5);
    p += 6656.*div(-1, -4);
    p += 16128.*div(-1, -3);
    p += 47432.*div(-1, -2);
    p += 92224.*div(-1, -1);
    p += 163476.*div(-1, 0);
    p += 92224.*div(-1, 1);
    p += 47432.*div(-1, 2);
    p += 16128.*div(-1, 3);
    p += 6656.*div(-1, 4);
    p += 1280.*div(-1, 5);
    p += 436.*div(-1, 6);
    p += 32.*div(-1, 7);
    p += 9.*div(-1, 8);
    p += 1.*div(0, -9);
    p += 4.*div(0, -8);
    p += 97.*div(0, -7);
    p += 320.*div(0, -6);
    p += 2336.*div(0, -5);
    p += 6464.*div(0, -4);
    p += 24608.*div(0, -3);
    p += 59712.*div(0, -2);
    p += 163476.*div(0, -1);
    p += 409744.*div(0, 0);
    p += 163476.*div(0, 1);
    p += 59712.*div(0, 2);
    p += 24608.*div(0, 3);
    p += 6464.*div(0, 4);
    p += 2336.*div(0, 5);
    p += 320.*div(0, 6);
    p += 97.*div(0, 7);
    p += 4.*div(0, 8);
    p += 1.*div(0, 9);
    p += 9.*div(1, -8);
    p += 32.*div(1, -7);
    p += 436.*div(1, -6);
    p += 1280.*div(1, -5);
    p += 6656.*div(1, -4);
    p += 16128.*div(1, -3);
    p += 47432.*div(1, -2);
    p += 92224.*div(1, -1);
    p += 163476.*div(1, 0);
    p += 92224.*div(1, 1);
    p += 47432.*div(1, 2);
    p += 16128.*div(1, 3);
    p += 6656.*div(1, 4);
    p += 1280.*div(1, 5);
    p += 436.*div(1, 6);
    p += 32.*div(1, 7);
    p += 9.*div(1, 8);
    p += 36.*div(2, -7);
    p += 112.*div(2, -6);
    p += 1092.*div(2, -5);
    p += 2752.*div(2, -4);
    p += 11016.*div(2, -3);
    p += 21664.*div(2, -2);
    p += 47432.*div(2, -1);
    p += 59712.*div(2, 0);
    p += 47432.*div(2, 1);
    p += 21664.*div(2, 2);
    p += 11016.*div(2, 3);
    p += 2752.*div(2, 4);
    p += 1092.*div(2, 5);
    p += 112.*div(2, 6);
    p += 36.*div(2, 7);
    p += 84.*div(3, -6);
    p += 224.*div(3, -5);
    p += 1694.*div(3, -4);
    p += 3520.*div(3, -3);
    p += 11016.*div(3, -2);
    p += 16128.*div(3, -1);
    p += 24608.*div(3, 0);
    p += 16128.*div(3, 1);
    p += 11016.*div(3, 2);
    p += 3520.*div(3, 3);
    p += 1694.*div(3, 4);
    p += 224.*div(3, 5);
    p += 84.*div(3, 6);
    p += 126.*div(4, -5);
    p += 280.*div(4, -4);
    p += 1694.*div(4, -3);
    p += 2752.*div(4, -2);
    p += 6656.*div(4, -1);
    p += 6464.*div(4, 0);
    p += 6656.*div(4, 1);
    p += 2752.*div(4, 2);
    p += 1694.*div(4, 3);
    p += 280.*div(4, 4);
    p += 126.*div(4, 5);
    p += 126.*div(5, -4);
    p += 224.*div(5, -3);
    p += 1092.*div(5, -2);
    p += 1280.*div(5, -1);
    p += 2336.*div(5, 0);
    p += 1280.*div(5, 1);
    p += 1092.*div(5, 2);
    p += 224.*div(5, 3);
    p += 126.*div(5, 4);
    p += 84.*div(6, -3);
    p += 112.*div(6, -2);
    p += 436.*div(6, -1);
    p += 320.*div(6, 0);
    p += 436.*div(6, 1);
    p += 112.*div(6, 2);
    p += 84.*div(6, 3);
    p += 36.*div(7, -2);
    p += 32.*div(7, -1);
    p += 97.*div(7, 0);
    p += 32.*div(7, 1);
    p += 36.*div(7, 2);
    p += 9.*div(8, -1);
    p += 4.*div(8, 0);
    p += 9.*div(8, 1);
    p += 1.*div(9, 0);
    return  p / 1048576.;
}

float pre(int x,int y)
{
    return texelFetch(iChannel1, ivec2(gl_FragCoord.xy) + ivec2(x,  y) , 0).x;
}

float getPre( void )
{
    float p = 0.;
    p += 1.*pre(-10, 0);
    p += 10.*pre(-9, -1);
    p += 10.*pre(-9, 1);
    p += 45.*pre(-8, -2);
    p += 100.*pre(-8, 0);
    p += 45.*pre(-8, 2);
    p += 120.*pre(-7, -3);
    p += 450.*pre(-7, -1);
    p += 450.*pre(-7, 1);
    p += 120.*pre(-7, 3);
    p += 210.*pre(-6, -4);
    p += 1200.*pre(-6, -2);
    p += 2025.*pre(-6, 0);
    p += 1200.*pre(-6, 2);
    p += 210.*pre(-6, 4);
    p += 252.*pre(-5, -5);
    p += 2100.*pre(-5, -3);
    p += 5400.*pre(-5, -1);
    p += 5400.*pre(-5, 1);
    p += 2100.*pre(-5, 3);
    p += 252.*pre(-5, 5);
    p += 210.*pre(-4, -6);
    p += 2520.*pre(-4, -4);
    p += 9450.*pre(-4, -2);
    p += 14400.*pre(-4, 0);
    p += 9450.*pre(-4, 2);
    p += 2520.*pre(-4, 4);
    p += 210.*pre(-4, 6);
    p += 120.*pre(-3, -7);
    p += 2100.*pre(-3, -5);
    p += 11340.*pre(-3, -3);
    p += 25200.*pre(-3, -1);
    p += 25200.*pre(-3, 1);
    p += 11340.*pre(-3, 3);
    p += 2100.*pre(-3, 5);
    p += 120.*pre(-3, 7);
    p += 45.*pre(-2, -8);
    p += 1200.*pre(-2, -6);
    p += 9450.*pre(-2, -4);
    p += 30240.*pre(-2, -2);
    p += 44100.*pre(-2, 0);
    p += 30240.*pre(-2, 2);
    p += 9450.*pre(-2, 4);
    p += 1200.*pre(-2, 6);
    p += 45.*pre(-2, 8);
    p += 10.*pre(-1, -9);
    p += 450.*pre(-1, -7);
    p += 5400.*pre(-1, -5);
    p += 25200.*pre(-1, -3);
    p += 52920.*pre(-1, -1);
    p += 52920.*pre(-1, 1);
    p += 25200.*pre(-1, 3);
    p += 5400.*pre(-1, 5);
    p += 450.*pre(-1, 7);
    p += 10.*pre(-1, 9);
    p += 1.*pre(0, -10);
    p += 100.*pre(0, -8);
    p += 2025.*pre(0, -6);
    p += 14400.*pre(0, -4);
    p += 44100.*pre(0, -2);
    p += 63504.*pre(0, 0);
    p += 44100.*pre(0, 2);
    p += 14400.*pre(0, 4);
    p += 2025.*pre(0, 6);
    p += 100.*pre(0, 8);
    p += 1.*pre(0, 10);
    p += 10.*pre(1, -9);
    p += 450.*pre(1, -7);
    p += 5400.*pre(1, -5);
    p += 25200.*pre(1, -3);
    p += 52920.*pre(1, -1);
    p += 52920.*pre(1, 1);
    p += 25200.*pre(1, 3);
    p += 5400.*pre(1, 5);
    p += 450.*pre(1, 7);
    p += 10.*pre(1, 9);
    p += 45.*pre(2, -8);
    p += 1200.*pre(2, -6);
    p += 9450.*pre(2, -4);
    p += 30240.*pre(2, -2);
    p += 44100.*pre(2, 0);
    p += 30240.*pre(2, 2);
    p += 9450.*pre(2, 4);
    p += 1200.*pre(2, 6);
    p += 45.*pre(2, 8);
    p += 120.*pre(3, -7);
    p += 2100.*pre(3, -5);
    p += 11340.*pre(3, -3);
    p += 25200.*pre(3, -1);
    p += 25200.*pre(3, 1);
    p += 11340.*pre(3, 3);
    p += 2100.*pre(3, 5);
    p += 120.*pre(3, 7);
    p += 210.*pre(4, -6);
    p += 2520.*pre(4, -4);
    p += 9450.*pre(4, -2);
    p += 14400.*pre(4, 0);
    p += 9450.*pre(4, 2);
    p += 2520.*pre(4, 4);
    p += 210.*pre(4, 6);
    p += 252.*pre(5, -5);
    p += 2100.*pre(5, -3);
    p += 5400.*pre(5, -1);
    p += 5400.*pre(5, 1);
    p += 2100.*pre(5, 3);
    p += 252.*pre(5, 5);
    p += 210.*pre(6, -4);
    p += 1200.*pre(6, -2);
    p += 2025.*pre(6, 0);
    p += 1200.*pre(6, 2);
    p += 210.*pre(6, 4);
    p += 120.*pre(7, -3);
    p += 450.*pre(7, -1);
    p += 450.*pre(7, 1);
    p += 120.*pre(7, 3);
    p += 45.*pre(8, -2);
    p += 100.*pre(8, 0);
    p += 45.*pre(8, 2);
    p += 10.*pre(9, -1);
    p += 10.*pre(9, 1);
    p += 1.*pre(10, 0);
    return  p / 1048576.;
}

void
main ()
{
  float div = getDiv();
  float p = getPre() - div;
  gl_FragColor = vec4(p, div, vec2(1));
}
