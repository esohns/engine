#version 140

// glut_920_common.glsl
#define IndirectSamples 1
#define SamplesLimit 150
#define Bounces 1
#define PixelAcceptance 1.5
#define PixelCheckDistance .5

#define Pi 3.14159265359

#define MaxStepsDirect 128
#define MaxStepsIndirect 32
#define MaxShadowSteps 32
#define FogSteps 8

#define MaxDist 4.
#define MinDist .015

#define DoFClamping .3
#define DoFSamples 128

#define Density vec3(.0025, .0045, .006)
#define Anisotropy .4
#define FogRange 13.

vec3 LightDir = normalize(vec3(.0, .0, -1));
vec3 LightColor = vec3(1.) * 6.;
float LightRadius = .02;

struct Camera
{
  vec3 pos, rot;
  float focalLength, focalDistance, aperture;
};

mat3
rotationMatrix (vec3 rotEuler)
{
  float c = cos(rotEuler.x), s = sin(rotEuler.x);
  mat3 rx = mat3(1, 0, 0, 0, c, -s, 0, s, c);
  c = cos(rotEuler.y), s = sin(rotEuler.y);
  mat3 ry = mat3(c, 0, -s, 0, 1, 0, s, 0, c);
  c = cos(rotEuler.z), s = sin(rotEuler.z);
  mat3 rz = mat3(c, -s, 0, s, c, 0, 0, 0, 1);
    
  return rz * rx * ry;
}

Camera
getCam (float time)
{
  vec3 rot = vec3(cos(time*.4)/6., 1. + time*.2 + sin(time*.2)/4., .5);
  return Camera(vec3(0., 0., -10.) * rotationMatrix(rot), rot, 1., 7.5, .025);
}

vec3
uv2dir (Camera cam, vec2 uv)
{
  return normalize(vec3(uv, cam.focalLength)) * rotationMatrix(cam.rot);
}

vec2
pos2uv (Camera cam, vec3 pos)
{
  vec3 dir = normalize(pos - cam.pos) * inverse(rotationMatrix(cam.rot));
  return dir.xy * cam.focalLength / dir.z;
}

vec3
dirFromUv (Camera cam, vec2 uv)
{
  return normalize(vec3(uv, cam.focalLength)) * rotationMatrix(cam.rot);
}

float
sdf (vec3 position, out vec3 diffuseColor, out vec3 emissionColor)
{
  diffuseColor = vec3(1.);
  emissionColor = vec3(0.);
  float Scale = 2.25;
  float Radius = .25;
  mat3 Rotation;

  float time = 15.;

  Rotation = rotationMatrix(vec3(time, time*.7, time*.4)*.2);
  Scale += sin(time*.5)*.25;
  Radius += cos(time) *.25;
    
  vec4 scalevec = vec4(Scale, Scale, Scale, abs(Scale)) / Radius;
  float C1 = abs(Scale-1.0), C2 = pow(abs(Scale), float(1-7));
  vec4 p = vec4(position.xyz*Rotation, 1.0), p0 = p;
  for (int i = 0; i<7; i++)
  {
    p.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;
    p.xyzw *= clamp(max(Radius/dot(p.xyz, p.xyz), Radius), 0.0, 1.0);
    if(i < 3) p.xyz *= Rotation;
    p.xyzw = p*scalevec + p0;
  }

  return (length(p.xyz) - C1) / p.w - C2;
}

float
sdf (vec3 position)
{
  vec3 dc, ec;
  return sdf(position, dc, ec);
}

vec3
normalEstimation (vec3 pos)
{
  vec2 k = vec2(MinDist, 0);
  return normalize(vec3(sdf(pos + k.xyy) - sdf(pos - k.xyy),
                        sdf(pos + k.yxy) - sdf(pos - k.yxy),
                        sdf(pos + k.yyx) - sdf(pos - k.yyx)));
}

float
henyeyGreenstein (vec3 dirI, vec3 dirO)
{
  float cosTheta = dot(dirI, dirO);
  return Pi/4.0 * (1.0-Anisotropy*Anisotropy) / pow(1.0 + Anisotropy*Anisotropy - 2.0*Anisotropy*cosTheta, 3.0/2.0);
}

vec3
directLight (vec3 pos, vec3 normal)
{
  float dotLight = -dot(normal, LightDir);
  if(dotLight < 0.0) return vec3(0);
  vec3 pos0 = pos;
  float minAngle = LightRadius;
  for(int i = 0; i < MaxShadowSteps; i++)
  {
    float dist = sdf(pos);
    if(dist > MaxDist) break;
    if(dist < MinDist) return vec3(0.0);
    pos -= LightDir * dist * 2.5;
    minAngle = min(asin(dist/length(pos-pos0)), minAngle);
  }
  return LightColor * dotLight * clamp(minAngle/LightRadius, .0, 1.0);
}
// glut_920_common.glsl

uniform vec2 iResolution;
uniform float iTime;
uniform float iTimeDelta;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;
uniform sampler2D iChannel2;

float seed;

float
randomFloat ()
{
  return fract(sin(seed++)*43758.54536156);
}

vec3
ortho (vec3 v)
{
  return abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0)  : vec3(0.0, -v.z, v.y);
}

vec3
getCosineWeightedSample (vec3 dir)
{
  vec3 o1 = normalize(ortho(dir));
  vec3 o2 = normalize(cross(dir, o1));
  vec2 r = vec2(randomFloat(), randomFloat());
  r.x = r.x * 2.0 * Pi;
  r.y = pow(r.y, .5);
  float oneminus = sqrt(1.0-r.y*r.y);
  return cos(r.x) * oneminus * o1 + sin(r.x) * oneminus * o2 + r.y * dir;
}

vec3
background (vec3 dir)
{
  return LightColor * Density * 8. * henyeyGreenstein(-LightDir, dir);
}

vec3
directBackground (vec3 dir)
{
  return LightColor * Density * 1.;
}

bool
trace (inout vec3 pos, vec3 dir, out vec3 normal)
{
  for(int i = 0; i < MaxStepsIndirect; i++)
  {
    float dist = sdf(pos);
    if(dist > MaxDist)
      break;
    if(dist < MinDist)
    {
      normal = normalEstimation(pos);
      pos -= (2.*MinDist-dist) * dir;
      return true;
    }
    pos += dir*dist;
  }

  return false;
}

vec3
sampleIndirectLight (vec3 pos, vec3 normal)
{
  vec3 dir;
  vec3 abso = vec3(1.), light = vec3(0.), dc, ec;
  for(int i = 0; i < Bounces; i++)
  {
    dir = getCosineWeightedSample(normal);
    if(!trace(pos, dir, normal)) return light + abso*background(dir);
    sdf(pos, dc, ec);
    light += abso * (ec + dc*directLight(pos, normal));
    abso *= dc;
  }
  return light;
}

float
distancePixel (vec2 prevFragCoord, vec4 hit)
{
  if(  min(iResolution.xy, prevFragCoord) != prevFragCoord
    && max(vec2(0.)      , prevFragCoord) != prevFragCoord)
    return MaxDist;
  vec4 prevPos = texture(iChannel2, prevFragCoord/iResolution);
  Camera cam = getCam(iTime);
  return length(prevPos-hit);
}

vec4
previousSample (vec4 hit)
{
  vec2 prevUv = pos2uv(getCam(iTime-iTimeDelta), hit.xyz);
  vec2 prevFragCoord = prevUv * iResolution.y + iResolution/2.0;
    
  vec2 pfc, finalpfc;
  float dist, finaldist = MaxDist;
  for(int x = -1; x <= 1; x++)
    for(int y = -1; y <= 1; y++)
    {
      pfc = prevFragCoord + PixelCheckDistance*vec2(x, y);
      dist = distancePixel(pfc, hit);
      if(dist < finaldist)
      {
        finalpfc = pfc;
        finaldist = dist;
      }
    }
    
  Camera cam = getCam(iTime);
  if(finaldist < PixelAcceptance*length(hit.xyz-cam.pos)/cam.focalLength/iResolution.y)
    return texture(iChannel0, finalpfc/iResolution);
  return vec4(0.);
}

void
main ()
{
  seed = .256435865 * gl_FragCoord.x + .316548465 * gl_FragCoord.y + sin(iTime) * 16886.3158915;

  Camera cam = getCam(iTime);

  vec4 hit = texelFetch(iChannel1, ivec2(gl_FragCoord.xy), 0);
  if(hit.a == 0.)
  {
    vec2 uv = (gl_FragCoord.xy - iResolution / 2.0) / iResolution.y;
    gl_FragColor = vec4(directBackground(uv2dir(cam, uv)), 1.);
  }
  else
  {
#if 0
    gl_FragColor = previousSample(hit);
    gl_FragColor.rgb = gl_FragColor.a == 0. ? vec3(1., 0., 0.) : vec3(0., 1., 0.);
    gl_FragColor.a = 1.;
#else
    vec3 normal = normalEstimation(hit.xyz);

    vec3 iLight = vec3(0.);
    for(int i = 0; i < IndirectSamples; i++)
      iLight += sampleIndirectLight(hit.xyz, normal)/float(IndirectSamples);

    gl_FragColor = previousSample(hit);
    gl_FragColor.a += gl_FragColor.a > float(SamplesLimit) ? 0. : float(IndirectSamples);
    iLight = clamp(iLight, vec3(.0), vec3(gl_FragColor.a / 10.));
    gl_FragColor.rgb = mix(gl_FragColor.rgb, iLight, 1.0 / (gl_FragColor.a / float(IndirectSamples)));
#endif
  }
}
