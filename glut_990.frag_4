#version 130

// glut_990_common.glsl
const float dissipation 	= 0.95;

const float ballRadius		= 0.06;
const float fogHeigth		= ballRadius * 2.;
const int	nbSlice			= 32;
const float fogSlice		= fogHeigth / float(nbSlice);
const int	nbSphere 		= 3;
const float ShadowDensity 	= 25.;
const float FogDensity 		= 20.;

const float tau =  radians(360.);

vec2
rotate (float angle, float radius)
{
  return vec2(cos(angle),-sin(angle)) * radius;
}

bool
floorIntersect (vec3 ro, vec3 rd, float floorHeight, out float t)
{
  ro.y -= floorHeight;
  if(rd.y < -0.01)
  {
    t = ro.y / - rd.y;
    return true;
  }

  return false;
} 

vec2
sphIntersect (vec3 ro, vec3 rd, vec3 ce, float ra)
{
  vec3 oc = ro - ce;
  float b = dot( oc, rd );
  float c = dot( oc, oc ) - ra*ra;
  float h = b*b - c;
  if ( h<0.0 ) return vec2(-1.0);
  h = sqrt( h );

  return vec2( -b-h, -b+h );
}

vec2
boxIntersection (vec3 ro, vec3 rd, vec3 rad, vec3 center, out vec3 oN)
{
  ro -= center;
  vec3 m = 1.0/rd;
  vec3 n = m*ro;
  vec3 k = abs(m)*rad;
  vec3 t1 = -n - k;
  vec3 t2 = -n + k;

  float tN = max( max( t1.x, t1.y ), t1.z );
  float tF = min( min( t2.x, t2.y ), t2.z );

  if( tN>tF || tF<0.0) return vec2(-1.0);

  oN = -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);

  return vec2( tN, tF );
}
// glut_990_common.glsl

uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

float
div (int x, int y)
{
  return texelFetch(iChannel0, ivec2(gl_FragCoord.xy) + ivec2(x,  y) , 0).y;
}

float
pre (int x, int y)
{
  return texelFetch(iChannel0, ivec2(gl_FragCoord.xy) + ivec2(x,  y) , 0).x;
}

float
getPre ()
{
  float p = 0.;
  p += 1.*pre(-10, 0);
  p += 10.*pre(-9, -1);
  p += 10.*pre(-9, 1);
  p += 45.*pre(-8, -2);
  p += 100.*pre(-8, 0);
  p += 45.*pre(-8, 2);
  p += 120.*pre(-7, -3);
  p += 450.*pre(-7, -1);
  p += 450.*pre(-7, 1);
  p += 120.*pre(-7, 3);
  p += 210.*pre(-6, -4);
  p += 1200.*pre(-6, -2);
  p += 2025.*pre(-6, 0);
  p += 1200.*pre(-6, 2);
  p += 210.*pre(-6, 4);
  p += 252.*pre(-5, -5);
  p += 2100.*pre(-5, -3);
  p += 5400.*pre(-5, -1);
  p += 5400.*pre(-5, 1);
  p += 2100.*pre(-5, 3);
  p += 252.*pre(-5, 5);
  p += 210.*pre(-4, -6);
  p += 2520.*pre(-4, -4);
  p += 9450.*pre(-4, -2);
  p += 14400.*pre(-4, 0);
  p += 9450.*pre(-4, 2);
  p += 2520.*pre(-4, 4);
  p += 210.*pre(-4, 6);
  p += 120.*pre(-3, -7);
  p += 2100.*pre(-3, -5);
  p += 11340.*pre(-3, -3);
  p += 25200.*pre(-3, -1);
  p += 25200.*pre(-3, 1);
  p += 11340.*pre(-3, 3);
  p += 2100.*pre(-3, 5);
  p += 120.*pre(-3, 7);
  p += 45.*pre(-2, -8);
  p += 1200.*pre(-2, -6);
  p += 9450.*pre(-2, -4);
  p += 30240.*pre(-2, -2);
  p += 44100.*pre(-2, 0);
  p += 30240.*pre(-2, 2);
  p += 9450.*pre(-2, 4);
  p += 1200.*pre(-2, 6);
  p += 45.*pre(-2, 8);
  p += 10.*pre(-1, -9);
  p += 450.*pre(-1, -7);
  p += 5400.*pre(-1, -5);
  p += 25200.*pre(-1, -3);
  p += 52920.*pre(-1, -1);
  p += 52920.*pre(-1, 1);
  p += 25200.*pre(-1, 3);
  p += 5400.*pre(-1, 5);
  p += 450.*pre(-1, 7);
  p += 10.*pre(-1, 9);
  p += 1.*pre(0, -10);
  p += 100.*pre(0, -8);
  p += 2025.*pre(0, -6);
  p += 14400.*pre(0, -4);
  p += 44100.*pre(0, -2);
  p += 63504.*pre(0, 0);
  p += 44100.*pre(0, 2);
  p += 14400.*pre(0, 4);
  p += 2025.*pre(0, 6);
  p += 100.*pre(0, 8);
  p += 1.*pre(0, 10);
  p += 10.*pre(1, -9);
  p += 450.*pre(1, -7);
  p += 5400.*pre(1, -5);
  p += 25200.*pre(1, -3);
  p += 52920.*pre(1, -1);
  p += 52920.*pre(1, 1);
  p += 25200.*pre(1, 3);
  p += 5400.*pre(1, 5);
  p += 450.*pre(1, 7);
  p += 10.*pre(1, 9);
  p += 45.*pre(2, -8);
  p += 1200.*pre(2, -6);
  p += 9450.*pre(2, -4);
  p += 30240.*pre(2, -2);
  p += 44100.*pre(2, 0);
  p += 30240.*pre(2, 2);
  p += 9450.*pre(2, 4);
  p += 1200.*pre(2, 6);
  p += 45.*pre(2, 8);
  p += 120.*pre(3, -7);
  p += 2100.*pre(3, -5);
  p += 11340.*pre(3, -3);
  p += 25200.*pre(3, -1);
  p += 25200.*pre(3, 1);
  p += 11340.*pre(3, 3);
  p += 2100.*pre(3, 5);
  p += 120.*pre(3, 7);
  p += 210.*pre(4, -6);
  p += 2520.*pre(4, -4);
  p += 9450.*pre(4, -2);
  p += 14400.*pre(4, 0);
  p += 9450.*pre(4, 2);
  p += 2520.*pre(4, 4);
  p += 210.*pre(4, 6);
  p += 252.*pre(5, -5);
  p += 2100.*pre(5, -3);
  p += 5400.*pre(5, -1);
  p += 5400.*pre(5, 1);
  p += 2100.*pre(5, 3);
  p += 252.*pre(5, 5);
  p += 210.*pre(6, -4);
  p += 1200.*pre(6, -2);
  p += 2025.*pre(6, 0);
  p += 1200.*pre(6, 2);
  p += 210.*pre(6, 4);
  p += 120.*pre(7, -3);
  p += 450.*pre(7, -1);
  p += 450.*pre(7, 1);
  p += 120.*pre(7, 3);
  p += 45.*pre(8, -2);
  p += 100.*pre(8, 0);
  p += 45.*pre(8, 2);
  p += 10.*pre(9, -1);
  p += 10.*pre(9, 1);
  p += 1.*pre(10, 0);
  return  p / 1048576.;
}

void
main ()
{ 
  float p = getPre() - div(0,0);

  gl_FragColor = vec4(p,vec3(1.));
}
