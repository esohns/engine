uniform vec2 iResolution;
uniform vec4 iMouse;
uniform sampler2D iChannel0;
uniform vec2 iChannel0Resolution;

#define AA  0   // optional antialiasing

float PrTorusDf (vec3 p, float ri, float rc);
vec2 Rot2D (vec2 q, float a);
mat3 QtToRMat (vec4 q);
vec3 HsvToRgb (vec3 c);
float Fbm2 (vec2 p);
vec4 Loadv4 (int idVar);

vec3 qHit, ltDir;
float dstFar, ringRad;
int idObj;
const int nObj = 16;
const int nSphObj = 18;
const float pi = 3.14159, sqrt3 = 1.73205;

float ObjDf (vec3 p)
{
  return PrTorusDf (p, 0.5, ringRad - 0.5);
}

float ObjRay (vec3 ro, vec3 rd)
{
  mat3 mRot;
  vec3 rm, rdm, q;
  float dHit, dMin, d, tol;
  tol = 0.0005;
  dMin = dstFar;
  for (int n = 0; n < nObj; n ++) {
    mRot = QtToRMat (Loadv4 (4 * n + 2));
    rm = (ro - Loadv4 (4 * n).xyz) * mRot;
    rdm = rd * mRot;
    dHit = 0.;
    for (int j = 0; j < 120; j ++) {
      q = rm + dHit * rdm;
      d = ObjDf (rm + dHit * rdm);
      dHit += d;
      if (d < tol || dHit > dstFar) break;
    }
    if (d < tol && dHit < dMin) {
      dMin = dHit;
      qHit = q;
      idObj = n;
    }
  }
  return dMin;
}

vec3 ObjNf (vec3 p)
{
  mat3 mRot;
  vec4 v;
  vec2 e = vec2 (0.0002, -0.0002);
  mRot = QtToRMat (Loadv4 (4 * idObj + 2));
  p = (p - Loadv4 (4 * idObj).xyz) * mRot;
  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));
  return mRot * normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);
}

float ObjSShadow (vec3 ro, vec3 rd)
{
  mat3 mRot;
  vec3 rm, rdm;
  float sh, d, h;
  sh = 1.;
  for (int n = 0; n < nObj; n ++) {
    mRot = QtToRMat (Loadv4 (4 * n + 2));
    rm = (ro - Loadv4 (4 * n).xyz) * mRot;
    rdm = rd * mRot;
    d = 0.02;
    for (int j = 0; j < 20; j ++) {
      h = ObjDf (rm + d * rdm);
      sh = min (sh, smoothstep (0., 0.05 * d, h));
      d += clamp (3. * h, 0.1, 1.);
      if (sh < 0.05) break;
    }
    if (sh < 0.05) break;
  }
  return 0.5 + 0.5 * sh;
}

vec2 PixToHex (vec2 p)
{
  vec3 c, r, dr;
  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);
  c.y = - c.x - c.z;
  r = floor (c + 0.5);
  dr = abs (r - c);
  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));
  return r.xz;
}

vec2 HexToPix (vec2 h)
{
  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);
}

float HexEdgeDist (vec2 p)
{
  p = abs (p);
  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);
}

vec3 BgCol (vec3 ro, vec3 rd, float sh)
{
  vec3 vn, col, bgCol;
  bgCol = vec3 (0.3, 0.2, 0.1);
  if (rd.y < 0.) {
    ro -= (ro.y / rd.y) * rd;
    col = mix (vec3 (0.4, 0.3, 0.3), bgCol, Fbm2 (8. * ro.xz));
    vn = vec3 (0., 1., 0.);
    col *= 0.3 + 0.7 * sh * max (dot (vn, ltDir), 0.);
    col = mix (col, bgCol, min (0.003 * length (ro.xz), 1.));
  } else col = bgCol;
  return col;
}

vec3 ShowScene (vec3 ro, vec3 rd)
{
  vec4 col4;
  vec3 vn, col;
  vec2 p, ip;
  float dstFlr, dstObj, dEdge, c, sh;
  bool isBg;
  ringRad = Loadv4 (4 * nObj).z;
  dstFlr = (rd.y < 0.) ? - (ro.y - 0.5) / rd.y : dstFar;
  dstObj = ObjRay (ro, rd);
  isBg = false;
  sh = 1.;
  if (min (dstObj, dstFlr) < dstFar) {
    if (dstFlr < dstObj) {
      ro += rd * dstFlr;
      vn = vec3 (0., 1., 0.);
      isBg = true;
    } else {
      ro += rd * dstObj;
      vn = ObjNf (ro);
      p = vec2 (atan (qHit.z, ringRad - 0.5 - length (qHit.xy)),
         atan (qHit.y, - qHit.x)) / pi + 1.;
      p *= 6. * vec2 (sqrt3/2., (ringRad - 0.5) / 0.5);
      ip = PixToHex (p);
      dEdge = HexEdgeDist (p - HexToPix (ip));
      c = mod (dot (mod (2. * ip + ip.yx, 3.), vec2 (1., 2.)), 3.);
      col4 = vec4 (HsvToRgb (vec3 (mod (1.61803 * float (idObj) + 0.1 * c, 1.), 1., 1.)), 0.3);
      col4 = mix (vec4 (0.1), col4, smoothstep (0.05, 0.1, dEdge));
    }
    sh = ObjSShadow (ro, ltDir);
  } else isBg = true;
  if (! isBg) col = col4.rgb * (0.2 + 0.1 * max (dot (normalize (- ltDir.xz), vn.xz), 0.) +
     0.8 * sh * max (dot (vn, ltDir), 0.)) +
     col4.a * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);
  else col = BgCol (ro, rd, sh);
  return clamp (col, 0., 1.);
}

void main ()
{
  vec4 mPtr;
  vec3 col, rd, ro, rMid, vd;
  vec2 canvas, uv, uvv;
  float az, el, zmFac;
  canvas = iResolution.xy;
  uv = 2. * gl_FragCoord.xy / canvas - 1.;
  uv.x *= canvas.x / canvas.y;
  mPtr = iMouse;
  mPtr.xy = mPtr.xy / canvas - 0.5;
  dstFar = 100.;
  rMid = vec3 (0.);
  for (int n = 0; n < nObj; n ++) rMid += Loadv4 (4 * n).xyz;
  rMid /= float (nObj);
  ro = vec3 (0., rMid.y, -50.);
  vd = normalize (rMid - ro);
  az = 0.5 * pi + atan (vd.z, - vd.x);
  el = asin (vd.y) - 0.1 * pi;
  if (mPtr.z > 0.) {
    el += 0.5 * pi * mPtr.y;
    az += 2. * pi * mPtr.x;
  }
  zmFac = 6.5 - 3.5 * smoothstep (5., 10., rMid.y);
  ro.zy = Rot2D (ro.zy, el);
  ro.zx = Rot2D (ro.zx, az);
  ro.y = max (ro.y, 0.1);
  ltDir = normalize (vec3 (-1., 2., 1.));
  #if ! AA
  const float naa = 1.;
#else
  const float naa = 4.;
#endif  
  col = vec3 (0.);
  for (float a = 0.; a < naa; a ++) {
    uvv = uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.), 0.5 * pi * (a + 0.5));
    rd = normalize (vec3 (uvv, zmFac));
    rd.zy = Rot2D (rd.zy, el);
    rd.zx = Rot2D (rd.zx, az);
    col += (1. / naa) * ShowScene (ro, rd);
  }
  gl_FragColor = vec4 (col, 1.);
}

float PrTorusDf (vec3 p, float ri, float rc)
{
  return length (vec2 (length (p.xy) - rc, p.z)) - ri;
}

vec2 Rot2D (vec2 q, float a)
{
  vec2 cs;
  cs = sin (a + vec2 (0.5 * pi, 0.));
  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));
}

mat3 QtToRMat (vec4 q) 
{
  mat3 m;
  float a1, a2, s;
  s = q.w * q.w - 0.5;
  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;
  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;
  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;
  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;
  return 2. * m;
}

vec3 HsvToRgb (vec3 c)
{
  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1.,
     0., 1.), c.y);
}

const float cHashM = 43758.54;

vec2 Hashv2v2 (vec2 p)
{
  vec2 cHashVA2 = vec2 (37., 39.);
  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);
}

float Noisefv2 (vec2 p)
{
  vec2 t, ip, fp;
  ip = floor (p);  
  fp = fract (p);
  fp = fp * fp * (3. - 2. * fp);
  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);
  return mix (t.x, t.y, fp.x);
}

float Fbm2 (vec2 p)
{
  float f, a;
  f = 0.;
  a = 1.;
  for (int j = 0; j < 5; j ++) {
    f += a * Noisefv2 (p);
    a *= 0.5;
    p *= 2.;
  }
  return f * (1. / 1.9375);
}

#define txBuf iChannel0
#define txSize iChannel0Resolution

const float txRow = 128.;

vec4 Loadv4 (int idVar)
{
  float fi;
  fi = float (idVar);
  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /
     txSize);
}
