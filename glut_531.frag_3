uniform vec2 iResolution;
uniform int iFrame;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;
uniform sampler2D iChannel2;
uniform sampler2D iChannel3;

#define CUBECOUNT 16

vec4 readTex3(int cx,int cy)
{
    return textureLod(iChannel3,vec2((float(cx)+0.1)/iResolution.x,(float(cy)+0.1)/iResolution.y),0.);
}
vec4 readTex2(int cx,int cy)
{
    return textureLod(iChannel2,vec2((float(cx)+0.1)/iResolution.x,(float(cy)+0.1)/iResolution.y),0.);
}
vec4 readTex1(int cx,int cy)
{
    return textureLod(iChannel1,vec2((float(cx)+0.1)/iResolution.x,(float(cy)+0.1)/iResolution.y),0.);
}

vec4 readTex0(int cx,int cy)
{
    return textureLod(iChannel0,vec2((float(cx)+0.1)/iResolution.x,(float(cy)+0.1)/iResolution.y),0.);
}

vec3 getCubePos(int ci)
{
    return readTex3(ci,0).xyz;
}
vec4 getCubeQuat(int ci)
{
    return readTex3(ci,1).xyzw;
}
vec3 getCubeVel(int ci)
{
    return readTex1(ci,2).xyz;
}
vec3 getCubeRotVel(int ci)
{
    return readTex1(ci,3).xyz;
}
vec3 getCubeVelQP(int ci,vec3 querypos)
{
    return cross(querypos-getCubePos(ci),getCubeRotVel(ci))+getCubeVel(ci);
}

int pixelx,pixely;

void main ()
{
  pixelx = int(floor(gl_FragCoord+0.01).x);
  pixely = int(floor(gl_FragCoord+0.01).y);

  int ci = pixelx/12;
  int cj = pixely/4;
  if (cj>=ci) discard;
  if (ci>=CUBECOUNT) discard;
    
  if ((length(getCubePos(ci)-getCubePos(cj))>6.0 && cj!=0))  // bounding check
  {
    gl_FragColor = vec4(0.,0.,0.,0.);
    return;
  }

  int forceid = pixelx%12+pixely%4*12;
  vec3 totalForce;

  int i = forceid;
  int lpx = ci*12+i%12;
  int lpy = cj*4+i/12;

  totalForce = readTex2(lpx,lpy).xyz;
  vec3 collpos = readTex0(lpx,lpy).xyz;

  if (collpos.x!=0.0) // x==0 means no collision at the force denoted by this pixel
  {
    vec3 veldiff = getCubeVelQP(cj,collpos)-getCubeVelQP(ci,collpos);

    vec3 collisNormal = readTex1(ci+CUBECOUNT,cj).xyz;

    totalForce += veldiff*0.022;

    float perpart = dot(collisNormal,totalForce);
    vec3 tangentialpart = totalForce-collisNormal*perpart;

    const float FrictionConstant = 0.7;

    if (length(tangentialpart)>perpart*FrictionConstant)
    {
      tangentialpart *= (perpart*FrictionConstant)/length(tangentialpart);
      totalForce = tangentialpart + collisNormal*perpart;
    }

    if (perpart<0.0)
    {
        totalForce = vec3(0.,0.,0.);
    }
  }
  else
    totalForce = vec3(0.,0.,0.);

  if (iFrame==1)
    totalForce = vec3(0.,0.,0.);
  gl_FragColor = vec4 (totalForce,1.0);
}
