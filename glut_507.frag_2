// glut_507_common.glsl
#define N 30
#define L .28
#define R iResolution.xy
#define Main void main ()
#define A(U) texture(iChannel0,(U)/R)
#define ei(a) mat2(cos(a),sin(a),-sin(a),cos(a))

vec4
hash (vec4 p)
{
  const vec4 k = vec4(0.1031, 0.11369, 0.13787, 0.16379);
  p = fract(p * k);
  p += dot(p, p.wxyz + k);
  p = fract((p.xxyz + p.yzww) * p.zyxw);
  return fract(sin(p) * 43758.5453);
}

float
circle (vec3 p, vec3 d, float r)
{
  // |p + d*x| = r
  // p.p-rr + 2pdx+ddx^2 = 0
  float b = 2.*dot(p,d);
  float a = dot(p,p)-r*r;
  float det = b*b-4.*a;
  if (det < 0.) return -1.;
  vec2 o = 0.5*(-b+vec2(-1,1)*sqrt(det));
  if (o.x < 0.) return o.y;
  else return min(o.x,o.y);
}

float
intersectCube (vec3 p, vec3 d, vec3 lo, vec3 hi, out vec3 no)
{
  vec3 tLo = (lo - p) / d;
  vec3 tHi = (hi - p) / d;
  vec3 tMin = min(tLo, tHi);
  vec3 tMax = max(tLo, tHi);
  float tEntry = max(tMin.x, max(tMin.y, tMin.z));
  float tExit = min(tMax.x, min(tMax.y, tMax.z));

  if (tEntry > tExit || tExit < 0.0)
  {
    return -1.0; // No intersection
  }

  if (tEntry > 0.0)
  {
    if (tEntry == tMin.x) no = vec3(-sign(d.x), 0., 0.);
    else if (tEntry == tMin.y) no = vec3(0., -sign(d.y), 0.);
    else if (tEntry == tMin.z) no = vec3(0., 0., -sign(d.z));
    return tEntry;
  }
  else
  {
    if (tExit == tMax.x) no = vec3(sign(d.x), 0., 0.);
    else if (tExit == tMax.y) no = vec3(0., sign(d.y), 0.);
    else if (tExit == tMax.z) no = vec3(0., 0., sign(d.z));
    return tExit;
  }
}
// glut_507_common.glsl

uniform vec2 iResolution;
uniform float iTime;
uniform sampler2D iChannel0;

Main
{
  vec3 p = vec3(.6*2.*(gl_FragCoord.xy-.5*R)/R.y,-2.);
  vec3 d = normalize(vec3(2.*(gl_FragCoord.xy-.5*R)/R.y,20.+17.*sin(iTime)));
  p.yz *= ei(-1.5*sin(.33*iTime));
  d.yz *= ei(-1.5*sin(.33*iTime));
  p.xz *= ei(iTime);
  d.xz *= ei(iTime);
  gl_FragColor = vec4(0);
  for (int k = 0; k < 10; k++)
  {
    vec3 no;
    float o = intersectCube(p,d,vec3(-1),vec3(1),no);
    vec3 C = vec3(1);
    for (int i = 0; i < N; i++)
    {
      vec3 c = A(vec2(i,0)+.5).xyz;
      float s = circle(p-c,d,L);
      if (s>0.&&s < o||o < 0.) o = s, no = normalize(p-c+d*s),C = sin(float(i)+vec3(1,2,3));
    }
    bool ot = abs(p.x)<1.&&abs(p.y)<1.&&abs(p.z)<1.;
    p += d*o;
    if (ot)
      d = reflect(d,no);
    else
      d = refract(d,no,.5);
    p += 1e-3*d;
    gl_FragColor.xyz += C*.2*(0.5+0.5*no.y)*exp(-.1*float(k));
  }
}
