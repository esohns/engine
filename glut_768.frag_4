#version 130

uniform vec2 iResolution;
uniform float iTime;
uniform vec4 iMouse;
uniform sampler2D iChannel0;
uniform samplerCube iChannel1;

void
doCamera (out vec3 camPos, out vec3 camTar, float time, float mouseX)
{
  float an = 0.;
//  an = 0.3*iTime + 10.0*mouseX;
  camPos = vec3(4.5*sin(an),1.0,4.5*cos(an));
  camTar = vec3(0.0,0.0,0.0);
}

vec3
doBackground (vec3 rd)
{
  vec3 cube = texture(iChannel1,rd).xyz;
  return cube;
}

float
doModel (vec3 p)
{
  vec3 col = texture(iChannel0,vec2((p.x*0.5+0.5)*1.2,(-p.z*0.5+0.5)*1.3 )*0.8).xyz;

  vec3 b = vec3(1,.2001+col.x*.05,1.);
  vec3 d = abs(p+vec3(0,0.3,0)) - b;
  float shape = min(max(d.x,max(d.y*col.x,d.z)),0.0) + length(max(d,0.0));
  b = vec3(1,.001,1.);

  return shape;
}

vec3
doMaterial (vec3 pos, vec3 nor, vec3 rd)
{
  vec3 col= vec3(0.2,0.07,0.01);
  col = texture(iChannel0,vec2((pos.x*0.5+0.5)*1.2,(-pos.z*0.5+0.5)*1.3)*0.8).xyz;
  col.b +=0.1;
  col.g += 0.03;
  vec3 col1 = texture(iChannel1,reflect(nor,rd)).xyz;
  vec3 col2 = texture(iChannel1,refract(nor,-rd,0.95)).xyz;
  col *= mix(col1,col2,0.5);

  if(col.x > 0.145) col=vec3(1);

  return col;
}

float calcSoftshadow (vec3, vec3);
vec3
doLighting (vec3 pos, vec3 nor, vec3 rd, float dis, vec3 mal)
{
  vec3 lin = vec3(0.0);

  vec3  lig = normalize(vec3(1.0,0.7,0.9));
  float dif = max(dot(nor,lig),0.0);
  float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );
  lin += dif*vec3(4.00,4.00,4.00)*sha;

  lin += vec3(0.50,0.50,0.50);

  vec3 col = mal*lin;

  col *= exp(-0.01*dis*dis);

  return col;
}

float
calcIntersection (vec3 ro, vec3 rd)
{
  const float maxd = 20.0;
  const float precis = 0.001;
  float h = precis*2.0;
  float t = 0.0;
  float res = -1.0;
    for( int i=0; i<90; i++ )
    {
      if( h<precis||t>maxd ) break;
      h = doModel( ro+rd*t );
      t += h;
    }

  if( t<maxd ) res = t;
  return res;
}

vec3
calcNormal (vec3 pos)
{
  const float eps = 0.002;

  const vec3 v1 = vec3( 1.0,-1.0,-1.0);
  const vec3 v2 = vec3(-1.0,-1.0, 1.0);
  const vec3 v3 = vec3(-1.0, 1.0,-1.0);
  const vec3 v4 = vec3( 1.0, 1.0, 1.0);

  return normalize( v1*doModel( pos + v1*eps ) + 
                    v2*doModel( pos + v2*eps ) + 
                    v3*doModel( pos + v3*eps ) + 
                    v4*doModel( pos + v4*eps ) );
}

float
calcSoftshadow (vec3 ro, vec3 rd)
{
  float res = 1.0;
  float t = 0.0005;
  float h = 1.0;
    for( int i=0; i<40; i++ )
    {
      h = doModel(ro + rd*t);
      res = min( res, 64.0*h/t );
      t += clamp( h, 0.02, 2.0 );
    }
  return clamp(res,0.0,1.0);
}

mat3
calcLookAtMatrix (vec3 ro, vec3 ta, float roll)
{
  vec3 ww = normalize( ta - ro );
  vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );
  vec3 vv = normalize( cross(uu,ww));
  return mat3( uu, vv, ww );
}

void
main ()
{
  vec2 p = (-iResolution.xy + 2.0*gl_FragCoord.xy)/iResolution.y;
  vec2 m = iMouse.xy/iResolution.xy;

  vec3 ro, ta;
  doCamera( ro, ta, iTime, m.x );
  mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll

  vec3 rd = normalize( camMat * vec3(p.xy,6.0) ); // 2.0 is the lens length

  vec3 col = doBackground(rd);

  float t = calcIntersection( ro, rd );
  if( t>-0.5 )
  {
    vec3 pos = ro + t*rd;
    vec3 nor = calcNormal(pos);

    vec3 mal = doMaterial( pos, nor,rd );

    col = doLighting( pos, nor, rd, t, mal );
  }

  col = pow( clamp(col,0.0,1.0), vec3(0.4545) );

  gl_FragColor = vec4( col, 1.0 );
}
