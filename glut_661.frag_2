#version 130

uniform vec2 iResolution;
uniform float iTime;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

float
bumpFunc (vec2 p)
{
  return 0.5 * (texture(iChannel1, p).x + 1.0);
}

void
main ()
{
  vec2 uv = gl_FragCoord.xy/iResolution.xy;

  vec3 sp = vec3(uv, 0);
  vec3 rd = normalize(vec3(uv - 1.0, 1.));
  vec3 lp = vec3(cos(iTime/2.0)*0.5, sin(iTime/2.0)*0.5, -1.);
  vec3 sn = vec3(0., 0., -1);

  vec2 eps = 2.0 / iResolution.xy;

  float f = bumpFunc(sp.xy);
  float fx = bumpFunc(sp.xy-vec2(eps.x, 0.0));
  float fy = bumpFunc(sp.xy-vec2(0.0, eps.y));

  const float bumpFactor = 0.02;

  fx = (fx-f)/eps.x;
  fy = (fy-f)/eps.y;
  sn = normalize( sn + vec3(fx, fy, 0)*bumpFactor );           

  vec3 ld = lp - sp;
  float lDist = max(length(ld), 0.001);
  ld /= lDist;

  float atten = min(1./(0.25 + lDist*0.5 + lDist*lDist*0.05), 1.);

  atten *= f*f*.5 + .5;

  float diff = max(dot(sn, ld), 0.);  
  diff = pow(diff, 2.)*0.66 + pow(diff, 4.)*0.34; 
  float spec = pow(max(dot( reflect(-ld, sn), -rd), 0.), 8.); 

  vec3 texCol = texture(iChannel0, sp.xy).xyz;

  vec3 col = (texCol * (diff*vec3(1, .97, .92)*1.3 + 0.5) + vec3(1., 0.6, .2)*spec*1.3)*atten;

  gl_FragColor = vec4(min(col, 1.), 1.);
}
