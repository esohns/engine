#version 130

uniform vec2 iResolution;
uniform float iTime;
uniform sampler2D iChannel0;

#define R iResolution.xy
float
A (vec2 U)
{
	return -10.*texture(iChannel0, U/R).x;
}
float ln (vec3 p, vec3 a, vec3 b) {return length(p-a-(b-a)*dot(p-a,b-a)/dot(b-a,b-a));}

void
main ()
{
  vec4 Q;
  vec2 U = gl_FragCoord.xy;

  vec3 p = vec3(.5*R,-R.x);
  vec3 d = normalize(p-vec3(U,0));
  vec3 li = vec3(1.3*R,.3*R.x);
  p += d*dot(-p,vec3(0,0,1))/dot(d,vec3(0,0,1));
  for (int i = 0; i < 10; i++)
    p += .6*d*(p.z-A(p.xy));
  vec3 q = li;
  vec3 c = normalize(p-li);
  for (int i = 0; i < 40; i++)
    q += .6*c*(q.z-A(q.xy));
  U = p.xy;
  float 
      n = A(U+vec2(0,1)),
      e = A(U+vec2(1,0)),
      s = A(U-vec2(0,1)),
      w = A(U-vec2(1,0));
  float a = A(U);
  vec3 g = normalize(vec3(e-w,n-s,-1));
  vec3 r = reflect(d,g);
  Q = (0.6+0.4*sin((.2*iTime)+(a)*(1.+.1*vec4(1,2,3,4))));
  float o = ln( li, p, p+r );
  float len = length(q-p);
  float h = 0.5+0.5*dot(normalize(p-li),g);
  Q *= h*(exp(-.04*o)*6.+0.3*exp(-.001*o))*(exp(-.3*len));

  gl_FragColor = Q;
}
