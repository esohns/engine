#version 330

// glut_743_common.glsl
#define T(p) texelFetch(iChannel0, ivec2(mod(p,R)), 0)
#define P(p) texture(iChannel0, mod(p,R)/R)
#define C(p) texture(iChannel1, mod(p,R)/R)
#define D(p) texture(iChannel2, mod(p,R)/R)

#define PI 3.14159265
#define dt 1.
#define R iResolution.xy

const vec2 dx = vec2(0, 1);

float
hash11(float p)
{
  p = fract(p * .1031);
  p *= p + 33.33;
  p *= p + p;
  return fract(p);
}

#define rand_interval 250
#define random_gen(a, b, seed) ((a) + ((b)-(a))*hash11(seed + float(iFrame/rand_interval)))

#define distribution_size 1.4

#define sense_num 2
#define sense_ang (0.15 + 0.13*sin(iTime))
#define sense_dis 200.
#define sense_oscil 0.0
#define oscil_scale 1.
#define oscil_pow 1.
#define sense_force 0.5
#define distance_scale 2.
#define force_scale 0.5
#define trailing 0.
#define acceleration 0.0

#define GS(x) exp(-dot(x,x))
#define GSS(x) exp(-dot(x,x))
#define GS0(x) exp(-length(x))
#define Dir(ang) vec2(cos(ang), sin(ang))
#define Rot(ang) mat2(cos(ang), sin(ang), -sin(ang), cos(ang))
#define loop(i,x) for(int i = 0; i < x; i++)
#define range(i,a,b) for(int i = a; i <= b; i++)

#define Pressure(rho) 0.0*rho.z
#define fluid_rho 0.2

#define PACK(X) ( uint(round(65534.0*clamp(0.5*X.x+0.5, 0., 1.))) + \
           65535u*uint(round(65534.0*clamp(0.5*X.y+0.5, 0., 1.))) )   
               
#define UNPACK(X) (clamp(vec2(X%65535u, X/65535u)/65534.0, 0.,1.)*2.0 - 1.0)              

#define DECODE(X) UNPACK(floatBitsToUint(X))
#define ENCODE(X) uintBitsToFloat(PACK(X))
// glut_743_common.glsl

uniform vec2 iResolution;
uniform float iTime;
uniform vec4 iMouse;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

void
main ()
{
  vec4 U;
  vec2 pos = gl_FragCoord.xy;
  
  vec2 uv = pos / R;
  ivec2 p = ivec2(pos);
        
  vec4 data = T(pos);
  vec2 X = DECODE(data.x) + pos;
  vec2 V = DECODE(data.y);
  float M = data.z;
    
  if (M != 0.)
  {
    vec2 F = vec2(0.);

    vec4 d_u = T(pos + dx.xy), d_d = T(pos - dx.xy);
    vec4 d_r = T(pos + dx.yx), d_l = T(pos - dx.yx);

    vec2 p_u = DECODE(d_u.x), p_d = DECODE(d_d.x);
    vec2 p_r = DECODE(d_r.x), p_l = DECODE(d_l.x);

    vec2 v_u = DECODE(d_u.y), v_d = DECODE(d_d.y);
    vec2 v_r = DECODE(d_r.y), v_l = DECODE(d_l.y);

    vec2 p = vec2(Pressure(d_r) - Pressure(d_l),
                  Pressure(d_u) - Pressure(d_d));

    vec2 dgrad = vec2(d_r.z - d_l.z,
                      d_u.z - d_d.z);

    float div = v_r.x - v_l.x + v_u.y - v_d.y;
    float curl = v_r.y - v_l.y - v_u.x + v_d.x;

    F -= 0.6 * M * dgrad;

    float ang = atan(V.y, V.x);
    float dang = sense_ang * PI / float(sense_num);
    vec2 slimeF = vec2(0.);

    range(i, -sense_num, sense_num)
    {
      float cang = ang + float(i) * dang;
      vec2 dir = (3. + sense_dis * pow(max(M - 0., 0.), distance_scale)) * Dir(cang);
      vec3 s0 = C(X + dir).xyz;
      float fs = pow(s0.z, force_scale);
      float os = oscil_scale * pow(s0.z - M, oscil_pow);
      slimeF += sense_oscil * Rot(os) * s0.xy + sense_force * Dir(ang + sign(float(i))*PI*0.5) * fs;
    }

    slimeF -= 0.1 * dot(slimeF, normalize(V)) * normalize(V);
    F += slimeF / float(2 * sense_num);

    if (iMouse.z > 0.)
    {
      vec2 dx = pos - iMouse.xy;
      F += 0.1 * Rot(PI*0.5) * dx * GS(dx/30.);
    }

    V += Rot(-0.*curl) * F * dt / M;

    V *= 1. + acceleration;

    float v = length(V);
    V /= (v > 1.) ? v / 1. : 1.;
  }

  X = clamp(X - pos, vec2(-0.5), vec2(0.5));
  U = vec4(ENCODE(X), ENCODE(V), M, 0.);

  gl_FragColor = U;
}
