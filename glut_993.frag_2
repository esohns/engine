#version 330

uniform vec2 iResolution;
uniform sampler2D iChannel0;
uniform samplerCube iChannel1;

vec3 tx2D (vec2 p) { return texture(iChannel0, p).xyz; }
float getHeight (vec2 p) { return texture(iChannel0, p).w/4.; }

void
main ()
{
  vec2 iR = iResolution;
  vec2 uvT = gl_FragCoord.xy/iR;
  vec2 uv = (gl_FragCoord.xy - iR * .5) / iR;

  vec3 col = tx2D(uvT);

  float height = getHeight(uvT);

  vec3 e = vec3(.004*450./iR, 0);

  vec4 t4 = vec4(getHeight(uvT - e.xz), getHeight(uvT + e.xz),
                 getHeight(uvT - e.zy), getHeight(uvT + e.zy));

  vec3 vx = vec3(e.x*2., 0, t4.x - t4.y);
  vec3 vy = vec3(0, -e.y*2., t4.w - t4.z);
  vec3 sn = normalize(cross(vx, vy));

  float amp = 1.;
  float curv = clamp((height*4. - dot(t4, vec4(1)))/e.x/2.*amp + .5, 0., 1.);

  vec3 ld = normalize(vec3(-.25, .75, -.5) - vec3(uv, 0));

  vec3 rd = normalize(vec3(uv, 1));

  float dif = max(dot(sn, ld), 0.);
  float spe = pow(max(dot(reflect(ld, sn), rd), 0.), 16.);
  float fre = min(1. - max(dot(-rd, sn), 0.), 1.);

  vec3 tx2 = texture(iChannel1, reflect(rd, sn)).xyz; tx2 *= tx2;
  vec3 rCol = col*(height*8. + 1.)*mix(tx2.zyx, tx2.yyy, .3);
  col = mix(col, rCol*1.5, fre);

  col *= (dif + vec3(1, .7, .4)*spe*4. + .5);

  col *= curv*.5 + .5;

  gl_FragColor = vec4(sqrt(max(col, 0.)), 1.);
}
