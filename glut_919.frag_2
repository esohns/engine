#version 330

uniform vec2 iResolution;
uniform float iTime;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

float
hash21 (vec2 f)
{
  uvec2 p = floatBitsToUint(f + 16384.);
  p = 1664525U*(p>>1U^p.yx);
  return float(1103515245U*(p.x^(p.y>>3U)))/float(0xffffffffU);
}

mat2 rot2 (float a) { float c = cos(a), s = sin(a); return mat2(c, s, -s, c); }

void
main ()
{
  vec2 uv = gl_FragCoord.xy/iResolution;

#if 0
  vec3 col = texture(iChannel0, uv).xyz;
#else
  vec2 pix = vec2(-4./iResolution.x, 0);
  float R = texture(iChannel0, uv - pix, pix.x).x;
  float G = texture(iChannel0, uv).y;
  float B = texture(iChannel0, uv + pix, pix.x).z;
  vec3 col = vec3(R, G, B);

  vec3 acc = vec3(0);
  float a = 0., w = 1.;
  for (int i = 0; i<16; i++)
  {
    vec2 offs = (texture(iChannel1, uv + vec2(4*i, 7*i)/32. + fract(iTime*.071)).xy - .5)*2.;

#if 1
    vec2 uv2 = uv + offs*8./450.;

    R = textureLod(iChannel0, uv2 - pix,  2.).x;
    G = textureLod(iChannel0, uv2, 2.).y;
    B = textureLod(iChannel0, uv2 + pix,  2.).z;
    vec3 colI = vec3(R, G, B);
    acc += colI*w;
#else
    vec2 uv2 = uv + offs*8./450.;
    acc += textureLod(iChannel0, uv2, 2.).xyz*w;
#endif
    a += w;
  }

  acc /= a;

  col += acc*smoothstep(.25, .35, dot(acc, vec3(.289, .587, .114)))*.5;
#endif

  col *= max(1.1 - dot(uv - .5, uv - .5)*2., 0.);

  gl_FragColor = vec4(pow(col, vec3(1./2.2)), 1);
}
