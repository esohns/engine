#version 130

uniform vec2 iResolution;
uniform float iTime;
uniform vec4 iMouse;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

vec3 getDistRes () { return vec3(floor(pow(iResolution.x*iResolution.y,.33)-1.)); }

float
distTiled (vec3 pos)
{
  ivec3 res=ivec3(getDistRes());
  pos=pos*.5+.5;
  int z1=int(floor(pos.z*float(res.z)));
  int z2=int(ceil(pos.z*float(res.z)));
  float fr=fract(pos.z*float(res.z));
  int xnum=int(iResolution.x)/res.x;
  vec2 t1=vec2(res.x*(z1%xnum),res.y*(z1/xnum))+pos.xy*float(res.xy);
  vec2 t2=vec2(res.x*(z2%xnum),res.y*(z2/xnum))+pos.xy*float(res.xy);
  t1/=iResolution.xy;
  t2/=iResolution.xy;
  return mix(texture(iChannel0,t1).x,texture(iChannel0,t2).x,fr);
}

#define FloorZ -.75
vec2
mdist (vec3 pos)
{
  float m=1.;
  vec3 tpos=clamp(pos,-.95,.95);
  float d=(distTiled(tpos)-.02);
  d+=length(tpos-pos)*.5;
  float dp=d;
  d=min(d,pos.z-FloorZ);
  if (d<dp)
    m=2.;

  return vec2(d,m);
}

float
dist (vec3 pos)
{
  return mdist(pos).x;
}

#define PI2 6.2832
#define LNUM 5

vec3
getGrad (vec3 p)
{
  float eps=1./64.;
  vec3 d = vec3(eps,0,0);
  return vec3(
    dist(p+d.xyz)-dist(p-d.xyz),
    dist(p+d.zxy)-dist(p-d.zxy),
    dist(p+d.yzx)-dist(p-d.yzx))/eps;
}

vec4
inverseQuat (vec4 q)
{
  return vec4(-q.xyz,q.w);
}

vec4
multQuat (vec4 a, vec4 b)
{
  return vec4(cross(a.xyz,b.xyz) + a.xyz*b.w + b.xyz*a.w, a.w*b.w - dot(a.xyz,b.xyz));
}

vec3
transformVecByQuat (vec3 v, vec4 q)
{
  return v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w*v );
}

vec4
axAng2Quat (vec3 ax, float ang)
{
  return vec4(normalize(ax),1)*sin(vec2(ang*.5)+vec2(0,PI2*.25)).xxxy;
}

vec3
refl (vec3 dir)
{
  return mix(vec3(.2,.3,.4),vec3(.7,.85,1)*1.5,clamp(dir.z*3.+.5,0.,1.));
}

float
march (inout vec3 pos, vec3 dir)
{
  float rval=0.0;
  float R = 1.01;
  float d0=length(pos);

  bool inside = false;
  vec3 pn = pos-dir*dot(pos,dir);
  float d=length(pn);
  inside = inside || (d<R);
  inside=true;
  if (!inside)
    return 0.0;

  float eps=.001;
  for(int i=0;i<80;i++)
  {
    float d=dist(pos);
    if(d<eps)
    {
      rval=mdist(pos).y;
      break;
    }
    if(d>d0+R)
    {
      rval=0.0;
      break;
    }
    pos+=dir*d*1.;
  }

  return rval;
}

vec4
getRand (vec2 coord)
{
  vec4 c=vec4(0);
  c+=texture(iChannel1,coord+.003*iTime);
  c+=texture(iChannel1,coord/2.+.003*iTime)*2.;
  c+=texture(iChannel1,coord/4.+.003*iTime)*4.;
  c+=texture(iChannel1,coord/8.+.003*iTime)*8.;
  return c/(1.+2.+4.+8.);
}

vec4
myenv (vec3 pos, vec3 dir, float period)
{
  vec3 colHor=vec3(.3,.4,.5)+.25;
  vec3 colSky=mix(vec3(1.5,.75,0.)*1.7,vec3(.8,.9,1)*1.2,clamp(7.*dir.z,0.,1.));
  vec3 skyPos=pos+dir/abs(dir.z)*(20.-pos.z);
  float cloudPat=(1.+.4*(getRand(skyPos.xy*.001).x-.5));
  colSky*=mix(1.,cloudPat,step(0.,dir.z));
  vec3 colFloor=vec3(.3,.4,.5);
  vec3 colScale=vec3(1,1,1);
  vec3 floorPos=pos-dir/dir.z*(pos.z-FloorZ);
  vec2 s;
  float scale=1.;
  s=sin(floorPos.xy*PI2*.5*period);
  scale*=(1.-.3*exp(-s.x*s.x/.01))*(1.-.3*exp(-s.y*s.y/.01));
  s=sin(floorPos.xy*PI2*.5/10.*period);
  scale*=(1.-.5*exp(-s.x*s.x/.001))*(1.-.5*exp(-s.y*s.y/.001));
  colFloor=mix(colFloor,colScale,1.-scale)*(1.+.4*(getRand(floorPos.xy*.001).x-.5));
  vec3 col=mix(colSky,colFloor,1.-smoothstep(-.01,.01,dir.z));
  col=mix(colHor,col,clamp(abs(dir.z*6.)-.1,0.,1.));
  return vec4(col,1);
}

void
main ()
{
  vec4 c1=texture(iChannel0,gl_FragCoord.xy/iResolution.xy);
 	vec3 pos = vec3(0,0,2.5*1.2);
 	vec3 dir = normalize(vec3((gl_FragCoord.xy-.5*iResolution.xy)/iResolution.x,-1.));
  vec2 ang=PI2*(iMouse.xy/iResolution.xy*vec2(-1,.3)-vec2(0,.02));
  if(iMouse.x==0. && iMouse.y==0.)
    ang = vec2(-2.4-.7+.3*iTime,1.4);
  vec4 q = vec4(0,0,0,1);
  q = multQuat(q,axAng2Quat(vec3(0,0,1),ang.x));
  q = multQuat(q,axAng2Quat(vec3(1,0,0),ang.y));
  pos=transformVecByQuat(pos,q);
  dir=transformVecByQuat(dir,q);
  vec3 camDir=transformVecByQuat(vec3(0,0,-1),q);
  vec3 camPos=pos;
  float m = march(pos,dir);
  vec3 n = normalize(getGrad(pos));

  vec3 bg=mix(vec3(1),vec3(.3,.3,1),length(gl_FragCoord.xy-.5*iResolution.xy)/iResolution.x);

  float fres=abs(dot(dir,n));
  fres=1.-fres;
  fres=.1+.9*fres;
  vec3 col=vec3(.75,.8,.85);
  if(int(m+.1)!=1)
    col=vec3(1);
  if(int(m+.1)==1)
    col*=1.-fres;
  if(int(m+.1)==1)
    col+=.9*fres*myenv(pos,reflect(dir,n),10.).xyz;
  col=.1+col*.9;

  bg=myenv(pos,dir,10.).xyz;
  if(gl_FragCoord.x<.3*iResolution.x && gl_FragCoord.y<.3*iResolution.y)
    bg=texture(iChannel0,gl_FragCoord.xy/iResolution.xy/.3).xyz;

  float ao=1.;
  ao*=.2+.8*dist(pos+n.xyz*.12)/.12;
  ao*=.4+.6*dist(pos+n.xyz*.25)/.25;
  ao*=.6+.4*dist(pos+n.xyz*.5)/.5;

  float vign = (1.1 - .2 * dot((gl_FragCoord.xy / iResolution.xy) * 2. - 1., (gl_FragCoord.xy / iResolution.xy) * 2. - 1.));
  gl_FragColor.xyz = col;
  gl_FragColor.xyz = mix(bg, col, (m != 1.) ? 0. : 1.);
  gl_FragColor.xyz *= clamp(ao * .7 + .3, 0., 1.);
  gl_FragColor.w = 1.;
  if(iMouse.x<.3*iResolution.x && iMouse.y<.3*iResolution.y && iMouse.x>1.)
    gl_FragColor = texture(iChannel0, gl_FragCoord.xy / iResolution.xy);
}
