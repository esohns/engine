#version 330

// glut_781_common.glsl
#define PI 3.14159265359
#define NEIGHBOR_DIST 6
#define DIFFUSION     1.12
#define ALIGNMENT     (0.7 + 0.3 * cos(PI * iTime/5.))
#define SEPARATION    (0.7 + 0.3 * cos(PI * iTime/6.))
#define COHESION      (0.7 + 0.3 * cos(PI * iTime/7.))

vec2
clamp_length (vec2 v, float r)
{
  if(length(v) > r) return r * normalize(v);
  return v;
}

uint
pack (vec2 x)
{
  x = 65535.0*clamp(0.5*x+0.5, 0., 1.);
  return uint(round(x.x)) + 65535u*uint(round(x.y));
}

vec2
unpack (uint a)
{
  vec2 x = vec2(a%65535u, a/65535u);
  return clamp(x/65535.0, 0.,1.)*2.0 - 1.0;
}

vec2
decode (float x)
{
  uint X = floatBitsToUint(x);
  return unpack(X); 
}

float
encode (vec2 x)
{
  uint X = pack(x);
  return uintBitsToFloat(X); 
}

struct particle
{
  vec2 X;
  vec2 V;
  float M;
};
    
particle
getParticle (vec4 data, vec2 pos)
{
  particle P;
  if (data == vec4(0)) return P;
  P.X = decode(data.x) + pos;
  P.M = data.y;
  P.V = data.zw;
  return P;
}

vec4
saveParticle (particle P, vec2 pos)
{
  vec2 x = clamp(P.X - pos, vec2(-0.5), vec2(0.5));
  return vec4(encode(x), P.M, P.V);
}

#define ITERATIONS 4

#define HASHSCALE1 .1031
#define HASHSCALE3 vec3(.1031, .1030, .0973)
#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)

float
hash11 (float p)
{
  vec3 p3  = fract(vec3(p) * HASHSCALE1);
  p3 += dot(p3, p3.yzx + 19.19);
  return fract((p3.x + p3.y) * p3.z);
}

float
hash12 (vec2 p)
{
  vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
  p3 += dot(p3, p3.yzx + 19.19);
  return fract((p3.x + p3.y) * p3.z);
}

float
hash13 (vec3 p3)
{
  p3  = fract(p3 * HASHSCALE1);
  p3 += dot(p3, p3.yzx + 19.19);
  return fract((p3.x + p3.y) * p3.z);
}

vec2
hash21 (float p)
{
  vec3 p3 = fract(vec3(p) * HASHSCALE3);
  p3 += dot(p3, p3.yzx + 19.19);
  return fract((p3.xx+p3.yz)*p3.zy);
}

vec2
hash22 (vec2 p)
{
  vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);
  p3 += dot(p3, p3.yzx+19.19);
  return fract((p3.xx+p3.yz)*p3.zy);
}

vec2
hash23 (vec3 p3)
{
  p3 = fract(p3 * HASHSCALE3);
  p3 += dot(p3, p3.yzx+19.19);
  return fract((p3.xx+p3.yz)*p3.zy);
}

vec3
hash31 (float p)
{
  vec3 p3 = fract(vec3(p) * HASHSCALE3);
  p3 += dot(p3, p3.yzx+19.19);
  return fract((p3.xxy+p3.yzz)*p3.zyx); 
}

vec3
hash32 (vec2 p)
{
  vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);
  p3 += dot(p3, p3.yxz+19.19);
  return fract((p3.xxy+p3.yzz)*p3.zyx);
}

vec3
hash33 (vec3 p3)
{
  p3 = fract(p3 * HASHSCALE3);
  p3 += dot(p3, p3.yxz+19.19);
  return fract((p3.xxy + p3.yxx)*p3.zyx);
}

vec4
hash41 (float p)
{
  vec4 p4 = fract(vec4(p) * HASHSCALE4);
  p4 += dot(p4, p4.wzxy+19.19);
  return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}

vec4
hash42 (vec2 p)
{
  vec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);
  p4 += dot(p4, p4.wzxy+19.19);
  return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}

vec4
hash43 (vec3 p)
{
  vec4 p4 = fract(vec4(p.xyzx)  * HASHSCALE4);
  p4 += dot(p4, p4.wzxy+19.19);
  return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}

vec4
hash44 (vec4 p4)
{
  p4 = fract(p4  * HASHSCALE4);
  p4 += dot(p4, p4.wzxy+19.19);
  return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}
// glut_781_common.glsl

uniform vec2 iResolution;
uniform sampler2D iChannel0;

#define Bi(p) ivec2(mod(p,iResolution.xy))
#define texel(a, p) texelFetch(a, Bi(p), 0)
#define range(i,a,b) for(int i = a; i <= b; i++)
#define dt 1.5

vec3
distribution (vec2 x, vec2 p, float K)
{
  vec4 aabb0 = vec4(p - 0.5, p + 0.5);
  vec4 aabb1 = vec4(x - K*0.5, x + K*0.5);
  vec4 aabbX = vec4(max(aabb0.xy, aabb1.xy), min(aabb0.zw, aabb1.zw));
  vec2 center = 0.5*(aabbX.xy + aabbX.zw);
  vec2 size = max(aabbX.zw - aabbX.xy, 0.);
  float m = size.x*size.y/(K*K);
  return vec3(center, m);
}

void
Reintegration (sampler2D ch, inout particle P, vec2 pos)
{
  range(i, -2, 2) range(j, -2, 2)
  {
    vec2 tpos = pos + vec2(i,j);
    vec4 data = texel(ch, tpos);

    particle P0 = getParticle(data, tpos);

    P0.X += P0.V*dt;

    vec3 D = distribution(P0.X, pos, DIFFUSION);

    float m = P0.M*D.z;

    P.X += D.xy*m;
    P.V += P0.V*m;

    P.M += m;
  }

  if(P.M != 0.)
  {
    P.X /= P.M;
    P.V /= P.M;
  }
}

void
main ()
{
  particle P;
  Reintegration (iChannel0, P, gl_FragCoord.xy);
  gl_FragColor = saveParticle(P, gl_FragCoord.xy);
}
