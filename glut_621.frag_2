#version 130

// glut_621_common.glsl
mat3
calcCameraMat (vec3 from, vec3 at)
{
  float filmDist = 1.3;
  vec3 camera_z = normalize(at - from);
  vec3 camera_x = normalize(cross(vec3(0,1,0), camera_z));
  vec3 camera_y = cross(camera_z, camera_x);
  return mat3(
      camera_x,
      camera_y,
      camera_z
  );
}

vec2
rd2uv (vec3 rd, vec3 from, vec3 at, float filmDist, float ar)
{
  mat3 camMat = calcCameraMat(from, at);
  vec3 uv = transpose(camMat) * rd;

  uv /= uv.z;
  uv *= filmDist;
  uv.x /= ar;
  uv = (uv + 1.0) / 2.0;
  return uv.xy;
}

float
radicalInverse (int x, float base)
{
  int baseI = int(base);
  float result = 0.0;
  float b = 1.0 / base;
  while (x > 0)
  {
    result += float(x % baseI) * b;
    x /= baseI;
    b /= base;
  }
  return result;
}

vec2
halton23 (int index)
{
  return vec2(radicalInverse(index, 2.0), radicalInverse(index, 3.0));
}

vec3
rgb2yCoCg (vec3 rgb)
{
  vec3 yCoCg;
  yCoCg.x = 0.25 * rgb.r + 0.5 * rgb.g + 0.25 * rgb.b;
  yCoCg.y = 0.5 * rgb.r - 0.5 * rgb.b;
  yCoCg.z = -0.25 * rgb.r + 0.5 * rgb.g - 0.25 * rgb.b;
  return yCoCg;
}

vec3
yCoCg2rgb (vec3 yCoCg)
{
  vec3 rgb;
  rgb.x = yCoCg.r + yCoCg.g - yCoCg.b;
  rgb.y = yCoCg.r + yCoCg.b;
  rgb.z = yCoCg.r - yCoCg.g - yCoCg.b;
  return rgb;
}

vec3
clipToBox (vec3 p, vec3 box_min, vec3 box_max)
{
  float epsilon = 0.000001;

  vec3 box_center = 0.5 * (box_max + box_min);
  vec3 box_half = 0.5 * (box_max - box_min);
  vec3 local_p = (p - box_center) / (box_half + epsilon);

  float max_d = max(max(abs(local_p.x), abs(local_p.y)), abs(local_p.z));

  if (max_d < 1.0)
    return p;

  local_p /= max_d;
  return local_p * (box_half + epsilon) + box_center;
}
// glut_621_common.glsl

uniform vec2 iResolution;
uniform int iFrame;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

vec4
sampleHistCatmullRom (vec2 uv, vec2 texSize)
{
  vec2 samplePos = uv * texSize;
  vec2 texPos1 = floor(samplePos - 0.5f) + 0.5f;

  vec2 f = samplePos - texPos1;

  vec2 w0 = f * (-0.5f + f * (1.0f - 0.5f * f));
  vec2 w1 = 1.0f + f * f * (-2.5f + 1.5f * f);
  vec2 w2 = f * (0.5f + f * (2.0f - 1.5f * f));
  vec2 w3 = f * f * (-0.5f + 0.5f * f);

  vec2 w12 = w1 + w2;
  vec2 offset12 = w2 / (w1 + w2);

  vec2 texPos0 = texPos1 - vec2(1);
  vec2 texPos3 = texPos1 + vec2(2);
  vec2 texPos12 = texPos1 + offset12;

  texPos0 /= texSize;
  texPos3 /= texSize;
  texPos12 /= texSize;

  vec4 result = vec4(0);
  result += texture(iChannel1, vec2(texPos0.x, texPos0.y)) * w0.x * w0.y;
  result += texture(iChannel1, vec2(texPos12.x, texPos0.y)) * w12.x * w0.y;
  result += texture(iChannel1, vec2(texPos3.x, texPos0.y)) * w3.x * w0.y;

  result += texture(iChannel1, vec2(texPos0.x, texPos12.y)) * w0.x * w12.y;
  result += texture(iChannel1, vec2(texPos12.x, texPos12.y)) * w12.x * w12.y;
  result += texture(iChannel1, vec2(texPos3.x, texPos12.y)) * w3.x * w12.y;

  result += texture(iChannel1, vec2(texPos0.x, texPos3.y)) * w0.x * w3.y;
  result += texture(iChannel1, vec2(texPos12.x, texPos3.y)) * w12.x * w3.y;
  result += texture(iChannel1, vec2(texPos3.x, texPos3.y)) * w3.x * w3.y;

  return result;
}

void
main ()
{
  vec2 uv = gl_FragCoord.xy / iResolution.xy;
  uv = 2.0 * uv - 1.0;
  uv.x *= iResolution.x / iResolution.y;

  if (iFrame == 0)
  {
    gl_FragColor = texelFetch(iChannel0, ivec2(gl_FragCoord.xy), 0);
    return;
  }

  int currIndex = iFrame & 1;
  int prevIndex = (currIndex + 1) & 1;
  vec3 currCamOrigin = texelFetch(iChannel0, ivec2(currIndex*2 + 0, 0), 0).rgb;
  vec3 currCamAt = texelFetch(iChannel0, ivec2(currIndex*2 + 1, 0), 0).rgb;
  vec3 prevCamOrigin = texelFetch(iChannel0, ivec2(prevIndex*2 + 0, 0), 0).rgb;
  vec3 prevCamAt = texelFetch(iChannel0, ivec2(prevIndex*2 + 1, 0), 0).rgb;

  float currDepth = texelFetch(iChannel0, ivec2(gl_FragCoord.xy), 0).a;
  if (currDepth > 100000.0)
  {
    gl_FragColor = texelFetch(iChannel0, ivec2(gl_FragCoord.xy), 0);
    return;
  }

  float filmDist = 1.3;
  mat3 cameraMat = calcCameraMat(currCamOrigin, currCamAt);
  vec3 rd = normalize(cameraMat * vec3(uv, filmDist));

  vec3 currPos = currCamOrigin + currDepth * rd;
  vec3 prevRd = normalize(currPos - prevCamOrigin);
  vec2 prevUv = rd2uv(prevRd, prevCamOrigin, prevCamAt, filmDist, iResolution.x/iResolution.y);

  vec3 curr = texelFetch(iChannel0, ivec2(gl_FragCoord.xy), 0).rgb;
  vec3 hist = sampleHistCatmullRom(prevUv.xy, iResolution.xy).rgb;

  float histWeight = 0.9;
  if (any(greaterThan(prevUv.xy, vec2(1.0))) ||
      any(lessThan(prevUv.xy, vec2(0.0))))
  {
    histWeight = 0.0;
  }

  vec3 neighborMin = vec3(10e31);
  vec3 neighborMax = vec3(0);
  float neighborSize = 0.5;
  for (int dy = -1; dy <= 1; ++dy)
  {
    for (int dx = -1; dx <= 1; ++dx)
    {
      vec2 neighborTexelAddr = (gl_FragCoord.xy + neighborSize*vec2(dx, dy))/iResolution.xy;
      vec3 neighborSample = texture(iChannel0, neighborTexelAddr).rgb;
      neighborSample = rgb2yCoCg(neighborSample);
      neighborMin = min(neighborMin, neighborSample);
      neighborMax = max(neighborMax, neighborSample);
    }
  }
  hist = rgb2yCoCg(hist);
  hist = clipToBox(hist, neighborMin, neighborMax);
  hist = yCoCg2rgb(hist);

  gl_FragColor = vec4(mix(curr, hist, vec3(histWeight)), 1.0);
}
