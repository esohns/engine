#version 130

uniform vec2 iResolution;
uniform int iFrame;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;
uniform sampler2D iChannel2;
uniform sampler2D iChannel3;

#define CUBECOUNT 16
#define STATIC_CUBE_COUNT 1

#define BUFD

#define PI (acos(0.)*2.0)
float gravity = -0.0045;

vec4 readTex3(int cx,int cy)
{
    return textureLod(iChannel3,vec2((float(cx)+0.1)/iResolution.x,(float(cy)+0.1)/iResolution.y),0.);
}
vec4 readTex2(int cx,int cy)
{
    return textureLod(iChannel2,vec2((float(cx)+0.1)/iResolution.x,(float(cy)+0.1)/iResolution.y),0.);
}
vec4 readTex1(int cx,int cy)
{
    return textureLod(iChannel1,vec2((float(cx)+0.1)/iResolution.x,(float(cy)+0.1)/iResolution.y),0.);
}

vec4 readTex0(int cx,int cy)
{
    return textureLod(iChannel0,vec2((float(cx)+0.1)/iResolution.x,(float(cy)+0.1)/iResolution.y),0.);
}
vec3 getCubePos(int ci)
{
    return readTex3(ci,0).xyz;
}
vec4 getCubeQuat(int ci)
{
    return readTex3(ci,1).xyzw;
}
vec3 getCubeVel(int ci)
{
    return readTex3(ci,2).xyz;
}
vec3 getCubeRotVel(int ci)
{
    return readTex3(ci,3).xyz;
}

vec3 rotate(vec4 quat,vec3 v)
{
    float sinsqr = (1.0-quat.w*quat.w);
    if (sinsqr!=0.0)
    {
        v=v*quat.w + quat.xyz*((dot(v,quat.xyz)*(1.0-quat.w))*(1.0/sinsqr)) + cross(v,quat.xyz);
        v=v*quat.w + quat.xyz*((dot(v,quat.xyz)*(1.0-quat.w))*(1.0/sinsqr)) + cross(v,quat.xyz);
    }
    return v;
}

int pixelx,pixely;

vec3 rotateAxis(vec3 axis,vec3 v) // the length of the axis defines angle
{
    float len = length(axis);
    if (len!=0.0)
    {
        axis = normalize(axis);
    v = v*cos(len) + axis*((v*axis) * (1.0-cos(len))) + cross(v,axis)*sin(len);
    }
    return v;
}


vec4 rotateRotation(vec4 q,vec3 axis) // Im sure, there is a simpler way to rotate a rotation :)
{
    vec3 x,y,z; // conversion to 3 perpendicular vectors, and rotation
    x = rotateAxis(axis,rotate(q,vec3(1.0,0.0,0.0)));
    y = rotateAxis(axis,rotate(q,vec3(0.0,1.0,0.0)));
    z = rotateAxis(axis,rotate(q,vec3(0.0,0.0,1.0)));
    
    // convert back to quaternion
  float trace = x.x + y.y + z.z; 
  if( trace > 0.0 ) {
    float s = 0.5 / sqrt(trace+ 1.0);
    q.w = 0.25 / s;
    q.x = ( z.y - y.z ) * s;
    q.y = ( x.z - z.x ) * s;
    q.z = ( y.x - x.y ) * s;
  } else {
    if ( x.x > y.y && x.x > z.z ) {
      float s = 2.0 * sqrt( 1.0 + x.x - y.y - z.z);
      q.w = (z.y - y.z ) / s;
      q.x = 0.25 * s;
      q.y = (x.y + y.x ) / s;
      q.z = (x.z + z.x ) / s;
    } else if (y.y > z.z) {
      float s = 2.0 * sqrt( 1.0 + y.y - x.x - z.z);
      q.w = (x.z - z.x ) / s;
      q.x = (x.y + y.x ) / s;
      q.y = 0.25 * s;
      q.z = (y.z + z.y ) / s;
    } else {
      float s = 2.0 * sqrt( 1.0 + z.z - x.x - y.y );
      q.w = (y.x - x.y ) / s;
      q.x = (x.z + z.x ) / s;
      q.y = (y.z + z.y ) / s;
      q.z = 0.25 * s;
    }
  }
    
    q=normalize(q); // no scaling :)
    
    
  return q;    
}

vec3 pos;
vec4 quat;
vec3 vel;
vec3 rotvel;

void initScene(int cubei)
{
        if (cubei==0) // static floor
        {
            pos = vec3(0,-1,5);
            vel = vec3(0.,0.,0.);
            rotvel = vec3(0.,0.,0.);
            quat = vec4(0.0,0.0,0.0,1.0);
            return;
        }
    
    
      cubei--;
        float cubeif = float(cubei);
      int div = 5;
      vec3 ro = vec3(0.,PI*(float(cubei)*2.0)/float(div),0.);
      pos = rotateAxis(ro,   vec3(0.0,1.0+float(cubei/div)*2.0,2.5));
    
        quat = rotateRotation(normalize(vec4(0.0,0.0,0.0,1.0)),ro);
    
        vel = vec3(-0.00,0.0,0.00);
        rotvel = vec3(cubeif*-0.001*cos(float(iFrame)),0.0,cubeif*-0.001); // randomize start setup
    
      if (cubei==CUBECOUNT-2) // thrown cube
        {
            pos = vec3(16.,2.0,-1.0+sin(float(iFrame)*1.2)); // randomize 
            vel = vec3(-0.37,0.14+sin(float(iFrame))*0.03,0.0);
        }
        
}

void main ()
{
  pixelx = int(floor(gl_FragCoord+0.01).x);
  pixely = int(floor(gl_FragCoord+0.01).y);

  gl_FragColor = vec4(0.0,0.0,0.0,0.0);

  if (pixely>=4) discard;
  if (pixelx>=(CUBECOUNT)) discard;
  int cubei = pixelx;

  pos = getCubePos(cubei);
  quat = getCubeQuat(cubei);
  vel = getCubeVel(cubei);
  rotvel = getCubeRotVel(cubei);

  if (cubei>=STATIC_CUBE_COUNT)
  {
    // apply forces (just the changes)
    for(int i=0;i<CUBECOUNT-1;i++)
    {
      int ci,cj;
      float scaler;
      if (i<cubei)
      {
        ci = cubei;
        cj = i;
        scaler  = 1.0;
        if (cj<STATIC_CUBE_COUNT)
          scaler = 2.0;
      }
      else
      {
        ci = i+1;
        cj = cubei;
        scaler = -1.0; // applying the opposite forces on the cube pair
      }
        
      if (!(length(getCubePos(ci)-getCubePos(cj))>6.0 && cj!=0)) // bounding check
        for(int j=0;j<48;j++)
        {
          vec3 forcepos = readTex0(ci*12+j%12,cj*4+j/12).xyz;
          if (forcepos.x!=0.0)
          {
            vec3 force = readTex2(ci*12+j%12,cj*4+j/12).xyz;
#ifdef BUFD
            // add repulsive force
            vec4 collisnormal = readTex1(ci+CUBECOUNT,cj);
            collisnormal.xyz *= max(abs(dot(forcepos,collisnormal.xyz)-collisnormal.w)-0.01,0.0);
            force += collisnormal.xyz*0.003;
#endif

            const float RotationalImmobilityTensor = 1.8;
            force *= scaler;
            vel += force;
            rotvel -= cross(forcepos-pos,force)/RotationalImmobilityTensor;
          }
        }
    }

#ifdef BUFD
    // move by adding velocity to position, and rotate
    pos += vel;
    quat = rotateRotation(quat,rotvel);
    vel.y += gravity;
#endif
  }

#ifdef BUFD
  if (iFrame == 1 || iFrame%(60*8) == 0)
  {
    initScene(cubei);
  }

  gl_FragColor = vec4(pos, 0.0);
  if (pixely==1) gl_FragColor = quat;
#endif
  if (pixely==2) gl_FragColor = vec4(vel, 0.0);
  if (pixely==3) gl_FragColor = vec4(rotvel, 0.0);
}
