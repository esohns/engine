#version 330

// glut_743_common.glsl
#define T(p) texelFetch(iChannel0, ivec2(mod(p,R)), 0)
#define P(p) texture(iChannel0, mod(p,R)/R)
#define C(p) texture(iChannel1, mod(p,R)/R)
#define D(p) texture(iChannel2, mod(p,R)/R)

#define PI 3.14159265
#define dt 1.
#define R iResolution.xy

const vec2 dx = vec2(0, 1);

float
hash11(float p)
{
  p = fract(p * .1031);
  p *= p + 33.33;
  p *= p + p;
  return fract(p);
}

#define rand_interval 250
#define random_gen(a, b, seed) ((a) + ((b)-(a))*hash11(seed + float(iFrame/rand_interval)))

#define distribution_size 1.4

#define sense_num 2
#define sense_ang (0.15 + 0.13*sin(iTime))
#define sense_dis 200.
#define sense_oscil 0.0
#define oscil_scale 1.
#define oscil_pow 1.
#define sense_force 0.5
#define distance_scale 2.
#define force_scale 0.5
#define trailing 0.
#define acceleration 0.0

#define GS(x) exp(-dot(x,x))
#define GSS(x) exp(-dot(x,x))
#define GS0(x) exp(-length(x))
#define Dir(ang) vec2(cos(ang), sin(ang))
#define Rot(ang) mat2(cos(ang), sin(ang), -sin(ang), cos(ang))
#define loop(i,x) for(int i = 0; i < x; i++)
#define range(i,a,b) for(int i = a; i <= b; i++)

#define Pressure(rho) 0.0*rho.z
#define fluid_rho 0.2

#define PACK(X) ( uint(round(65534.0*clamp(0.5*X.x+0.5, 0., 1.))) + \
           65535u*uint(round(65534.0*clamp(0.5*X.y+0.5, 0., 1.))) )   
               
#define UNPACK(X) (clamp(vec2(X%65535u, X/65535u)/65534.0, 0.,1.)*2.0 - 1.0)              

#define DECODE(X) UNPACK(floatBitsToUint(X))
#define ENCODE(X) uintBitsToFloat(PACK(X))
// glut_743_common.glsl

uniform vec2 iResolution;
uniform float iTime;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;
uniform samplerCube iChannel2;

//#define heightmap

vec3
hsv2rgb (vec3 c)
{
  vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);
  rgb = rgb * rgb * (3.0 - 2.0 * rgb);

  return c.z * mix(vec3(1.0), rgb, c.y);
}

#define FOV 1.56
#define RAD R.x*0.4

float
gauss (float x, float r)
{
  x /= r;
  return exp(-x * x);
}

float
sdSegment (vec2 p, vec2 a, vec2 b)
{
  vec2 pa = p - a, ba = b - a;
  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
  return length(pa - ba * h);
}

float
sdSphere (vec3 p, float s)
{
  return length(p) - s;
}

float
sdBox (vec3 p, vec3 b)
{
  vec3 q = abs(p) - b;
  return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float
rho (vec3 pos)
{
  pos.xy += R * 0.5;
  pos.xy = mod(pos.xy, R - 1.);
  vec4 v = P(pos.xy);
  return v.z;
}

vec3
color (vec3 pos)
{
  pos.xy += R * 0.5;
  pos.xy = mod(pos.xy, R - 1.);

  vec4 v = C(pos.xy);
  return v.xyz;
}


float
DE (vec3 pos)
{
  float y = 1. * rho(pos);
    
  pos.xy += R * 0.5;
  pos.xy = mod(pos.xy, R - 1.);
  float de = 1e10;
  de = min(de, 0.7 * sdBox(pos - vec3(R, 4. * y) * 0.5, vec3(R * 0.51, 3.)));
  return de;
}

vec4
calcNormal (vec3 p, float dx)
{
  const vec3 K = vec3(1, -1, 0);
  return (K.xyyx * DE(p + K.xyy * dx) +
          K.yyxx * DE(p + K.yyx * dx) +
          K.yxyx * DE(p + K.yxy * dx) +
          K.xxxx * DE(p + K.xxx * dx)) / vec4(4. * dx, 4. * dx, 4. * dx, 4.);
}

#define marches 70.
#define min_d 1.
vec4
ray_march (vec3 p, vec3 r)
{
  float d;
  for (float i = 0.; i < marches; i++)
  {
    d = DE(p);
    p += r * d;
    if (d < min_d || d > R.x)
      break;
  }
  return vec4(p, d);
}

void
main ()
{
  vec4 col;
  vec2 pos = gl_FragCoord.xy;
  
#ifdef heightmap
  pos = (pos - R*0.5)/max(R.x,R.y);
  vec2 angles = vec2(-1.5 + 0.0*iTime, -0.5)*PI;

  vec3 camera_z = vec3(cos(angles.x)*cos(angles.y),sin(angles.x)*cos(angles.y),sin(angles.y));
  vec3 camera_x = normalize(vec3(cos(angles.x+PI*0.5), sin(angles.x+PI*0.5),0.)); 
  vec3 camera_y = -normalize(cross(camera_x,camera_z));

  vec4 fp = vec4(R*0.5 + 0.*vec2(150.*iTime, 0.), 0., 0.);

  vec3 ray = normalize(camera_z + FOV*(pos.x*camera_x + pos.y*camera_y));
  vec3 cam_pos = vec3(fp.xy-R*0.5, 0.) - RAD*vec3(cos(angles.x)*cos(angles.y),sin(angles.x)*cos(angles.y),sin(angles.y));

  vec4 X = ray_march(cam_pos, ray);
  if(X.w < min_d)
  {
    float D = rho(X.xyz);
    vec3 c = color(X.xyz);
           
    vec3 albedo = vec3(0.5)*(D+0.07);
    float rough = 1. - 0.1*distance(albedo, vec3(1.));

    vec4 N0 = calcNormal(X.xyz, 2.*X.w)*vec4(4.,4.,1.,1.);
    vec3 n = normalize(N0.xyz);
    vec3 rd = reflect(ray, n);
    vec3 colA =texture(iChannel2,  rd.yzx).xyz;
    vec3 colB = (vec3(0.5) + 0.5*dot(rd, normalize(vec3(1.))));
    colB += 3.*rough*pow(max(dot(rd, normalize(vec3(1.))), 0.), 10.);
    colB += 3.*rough*pow(max(dot(rd, normalize(vec3(-0.5,-0.9,0.8))), 0.), 10.);
    float b = clamp(0.5 + 0.5*dot(n, normalize(vec3(1,1,1))), 0.,1.);
    float K = 1. - pow(max(dot(n,rd),0.), 2.);
    col.xyz = 1.*albedo*colB + 0.*rough*colA*K;
  }
  else
    col = 1.*texture(iChannel2,  ray.yzx);
  col = tanh(8.*col);
#else
  float r = P(pos.xy).z;
  vec4 c = C(pos.xy);

  vec4 d_u = T(pos + dx.xy), d_d = T(pos - dx.xy);
  vec4 d_r = T(pos + dx.yx), d_l = T(pos - dx.yx);

  vec2 p_u = DECODE(d_u.x), p_d = DECODE(d_d.x);
  vec2 p_r = DECODE(d_r.x), p_l = DECODE(d_l.x);

  vec2 v_u = DECODE(d_u.y), v_d = DECODE(d_d.y);
  vec2 v_r = DECODE(d_r.y), v_l = DECODE(d_l.y);

  vec2 p = vec2(Pressure(d_r) - Pressure(d_l),
                Pressure(d_u) - Pressure(d_d));

  float div = (v_r.x - v_l.x + v_u.y - v_d.y);
  float curl = (v_r.y - v_l.y - v_u.x + v_d.x);

  col = vec4(1.6) * r;
#endif

  gl_FragColor = col;
}
