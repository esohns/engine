#version 130

// glut_931_common.glsl
vec2
hash (vec2 p)
{
  p = vec2( dot(p,vec2(127.1,311.7)),
            dot(p,vec2(269.5,183.3)) );
  return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float
noise (vec2 p)
{
  const float K1 = 0.366025404;
  const float K2 = 0.211324865;

  vec2 i = floor( p + (p.x+p.y)*K1 );
  
  vec2 a = p - i + (i.x+i.y)*K2;
  vec2 o = step(a.yx,a.xy);    
  vec2 b = a - o + K2;
  vec2 c = a - 1.0 + 2.0*K2;

  vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );

  vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));

  return dot( n, vec3(70.0) );
}

float
G1V (float dnv, float k)
{
  return 1.0/(dnv*(1.0-k)+k);
}

float
ggx (vec3 n, vec3 v, vec3 l, float rough, float f0)
{
  float alpha = rough*rough;
  vec3 h = normalize(v+l);
  float dnl = clamp(dot(n,l), 0.0, 1.0);
  float dnv = clamp(dot(n,v), 0.0, 1.0);
  float dnh = clamp(dot(n,h), 0.0, 1.0);
  float dlh = clamp(dot(l,h), 0.0, 1.0);
  float f, d, vis;
  float asqr = alpha*alpha;
  const float pi = 3.14159;
  float den = dnh*dnh*(asqr-1.0)+1.0;
  d = asqr/(pi * den * den);
  dlh = pow(1.0-dlh, 5.0);
  f = f0 + (1.0-f0)*dlh;
  float k = alpha/1.0;
  vis = G1V(dnl, k)*G1V(dnv, k);
  float spec = dnl * d * f * vis;
  return spec;
}
// glut_931_common.glsl

uniform vec2 iResolution;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

float
laplacian (sampler2D sampler, vec2 fragCoord)
{
  vec2 vUv = fragCoord / iResolution;
  vec2 texel = 1. / iResolution;

  float step_x = texel.x;
  float step_y = texel.y;
  vec2 n  = vec2(0.0, step_y);
  vec2 ne = vec2(step_x, step_y);
  vec2 e  = vec2(step_x, 0.0);
  vec2 se = vec2(step_x, -step_y);
  vec2 s  = vec2(0.0, -step_y);
  vec2 sw = vec2(-step_x, -step_y);
  vec2 w  = vec2(-step_x, 0.0);
  vec2 nw = vec2(-step_x, step_y);

  vec4 uv =    texture(sampler, fract(vUv));
  vec4 uv_n =  texture(sampler, fract(vUv+n));
  vec4 uv_e =  texture(sampler, fract(vUv+e));
  vec4 uv_s =  texture(sampler, fract(vUv+s));
  vec4 uv_w =  texture(sampler, fract(vUv+w));
  vec4 uv_nw = texture(sampler, fract(vUv+nw));
  vec4 uv_sw = texture(sampler, fract(vUv+sw));
  vec4 uv_ne = texture(sampler, fract(vUv+ne));
  vec4 uv_se = texture(sampler, fract(vUv+se));

  vec2 diff = vec2(
    0.5 * (uv_e.x - uv_w.x) + 0.25 * (uv_ne.x - uv_nw.x + uv_se.x - uv_sw.x),
    0.5 * (uv_n.y - uv_s.y) + 0.25 * (uv_ne.y + uv_nw.y - uv_se.y - uv_sw.y)
  );

  return diff.x + diff.y;
}

void
main ()
{
  vec2 uv = gl_FragCoord.xy / iResolution;
  float la = length(texture(iChannel0, uv).zw);
  float lh = 0.9 * texture(iChannel1, uv, 3.5).w + 0.1 * la;
  gl_FragColor = vec4(-laplacian(iChannel0, gl_FragCoord.xy), 0, 0, lh);
}
