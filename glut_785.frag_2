#version 130

uniform vec2 iResolution;
uniform sampler2D iChannel0;

//#define DISABLE_DOF

vec2 uPixelSize;
float uFar = 1.;

const float GOLDEN_ANGLE = 2.39996323;
const float MAX_BLUR_SIZE = 10.;
const float RAD_SCALE = 1.;

float
getBlurSize (float depth, float focusPoint, float focusScale)
{
  float coc = clamp((1.0 / focusPoint - 1.0 / depth)*focusScale, -1.0, 1.0);
  return abs(coc) * MAX_BLUR_SIZE;
}

vec3
depthOfField (vec2 texCoord, float focusPoint, float focusScale)
{
  vec4 centerTex = texture(iChannel0, texCoord);
  float centerDepth = centerTex.a * uFar;
  float centerSize = getBlurSize(centerDepth, focusPoint, focusScale);
  vec3 color = centerTex.rgb;
    
#ifdef DISABLE_DOF
  return color;
#endif

  float tot = 1.0;

  float radius = RAD_SCALE;
  for (float ang = 0.; ang < 10000.; ang += GOLDEN_ANGLE)
  {
    if (radius >= MAX_BLUR_SIZE)
      break;

    vec2 tc = texCoord + vec2(cos(ang), sin(ang)) * uPixelSize * radius;
    vec4 sampleTex = texture(iChannel0, tc);
    vec3 sampleColor = sampleTex.rgb;
    float sampleDepth = sampleTex.a * uFar;
    float sampleSize = getBlurSize(sampleDepth, focusPoint, focusScale);
    if (sampleDepth > centerDepth)
      sampleSize = clamp(sampleSize, 0.0, centerSize*2.0);
    float m = smoothstep(radius-0.5, radius+0.5, sampleSize);
    color += mix(color/tot, sampleColor, m);
    tot += 1.0;
    radius += RAD_SCALE/radius;
  }

  return color /= tot;
}

vec3
tonemap2 (vec3 texColor)
{
  texColor /= 2.;
  texColor *= 16.;
  vec3 x = max(vec3(0),texColor-0.004);
  return (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);
}

void
main ()
{
  vec2 uv = gl_FragCoord.xy / iResolution.xy;
  uPixelSize = vec2(.002) / (iResolution.xy / iResolution.y);

  vec3 col = depthOfField(uv, .65, 1.);

  col = pow(col, vec3(1.25)) * 2.5;
  col = tonemap2(col);

  gl_FragColor = vec4(col, 1);
}
