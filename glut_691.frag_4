#version 330

// glut_691_common.glsl
#define Bf(p) mod(p,R)
#define Bi(p) ivec2(mod(p,R))
#define texel(a, p) texelFetch(a, Bi(p), 0)
#define pixel(a, p) texture(a, (p)/R)
#define ch0 iChannel0
#define ch1 iChannel1
#define ch2 iChannel2
#define ch3 iChannel3

#define PI 3.14159265

#define loop(i,x) for(int i = 0; i < x; i++)
#define range(i,a,b) for(int i = a; i <= b; i++)

#define dt 1.

#define border_h 5.
vec2 R;
vec4 Mouse;
float time;

#define temporal_blurring 0.98

#define mass 1.

#define fluid_rho 0.5

float
Pf (float rho)
{
  return 1.*rho*rho + 1.*pow(rho, 10.);
}

mat2
Rot (float ang)
{
  return mat2(cos(ang), -sin(ang), sin(ang), cos(ang)); 
}

vec2
Dir (float ang)
{
  return vec2(cos(ang), sin(ang));
}

float
sdBox (vec2 p, vec2 b)
{
  vec2 d = abs(p)-b;
  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
}

float
border (vec2 p)
{
  float bound = -sdBox(p - R*0.5, R*vec2(0.5, 0.5)); 
  float box = sdBox(Rot(0.*time)*(p - R*vec2(0.5, 0.2)) , R*vec2(0.05, 0.01));
  float drain = -sdBox(p - R*vec2(0.5, 0.6), R*vec2(1.5, 2.));
  return max(drain,min(bound, box));
}

#define h 1.
vec3
bN (vec2 p)
{
  vec3 dx = vec3(-h,0,h);
  vec4 idx = vec4(-1./h, 0., 1./h, 0.25);
  vec3 r = idx.zyw*border(p + dx.zy)
         + idx.xyw*border(p + dx.xy)
         + idx.yzw*border(p + dx.yz)
         + idx.yxw*border(p + dx.yx);
  return vec3(normalize(r.xy), r.z + 1e-4);
}

uint
pack (vec2 x)
{
  x = 65534.0*clamp(0.5*x+0.5, 0., 1.);
  return uint(round(x.x)) + 65535u*uint(round(x.y));
}

vec2
unpack (uint a)
{
  vec2 x = vec2(a%65535u, a/65535u);
  return clamp(x/65534.0, 0.,1.)*2.0 - 1.0;
}

vec2
decode (float x)
{
  uint X = floatBitsToUint(x);
  return unpack(X); 
}

float
encode(vec2 x)
{
  uint X = pack(x);
  return uintBitsToFloat(X); 
}

struct particle
{
  vec2 X;
  vec2 V;
  float M;
  float I;
};

particle
getParticle (vec4 data, vec2 pos)
{
  particle P; 
  P.X = decode(data.x) + pos;
  P.V = decode(data.y);
  P.M = data.z;
  P.I = data.w;
  return P;
}

vec4
saveParticle (particle P, vec2 pos)
{
  P.X = clamp(P.X - pos, vec2(-0.5), vec2(0.5));
  return vec4(encode(P.X), encode(P.V), P.M, P.I);
}

vec3
hash32 (vec2 p)
{
  vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
  p3 += dot(p3, p3.yxz+33.33);
  return fract((p3.xxy+p3.yzz)*p3.zyx);
}

float
G (vec2 x)
{
  return exp(-dot(x,x));
}

float
G0 (vec2 x)
{
  return exp(-length(x));
}

#define dif 0.92
vec3
distribution (vec2 x, vec2 p, float K)
{
  vec4 aabb0 = vec4(p - 0.5, p + 0.5);
  vec4 aabb1 = vec4(x - K*0.5, x + K*0.5);
  vec4 aabbX = vec4(max(aabb0.xy, aabb1.xy), min(aabb0.zw, aabb1.zw));
  vec2 center = 0.5*(aabbX.xy + aabbX.zw); //center of mass
  vec2 size = max(aabbX.zw - aabbX.xy, 0.); //only positive
  float m = size.x*size.y/(K*K); //relative amount
  return vec3(center, m);
}

void
Reintegration (sampler2D ch, inout particle P, vec2 pos)
{
  range(i, -2, 2) range(j, -2, 2)
  {
    vec2 tpos = pos + vec2(i,j);
    vec4 data = texel(ch, tpos);

    particle P0 = getParticle(data, tpos);

    P0.X += P0.V*dt;

    vec3 D = distribution(P0.X, pos, dif);

    float m = P0.M*D.z;

    P.X += D.xy*m;

    P.M += m;
  }

  if(P.M != 0.)
    P.X /= P.M;

  float I = 0.;
  range(i, -1, 1) range(j, -1, 1)
  {
    vec2 tpos = pos + vec2(i,j);
    vec4 data = texel(ch, tpos);

    particle P0 = getParticle(data, tpos);

    P0.X += P0.V*dt; //integrate position

    vec3 D = distribution(P0.X, pos, dif);

    float m = P0.M*D.z;

    vec2 dx = P0.X - P.X;

    float W = P0.I; 
    vec2 rel_V = P0.V + W*vec2(dx.y, -dx.x);
    float v = length(P.V);
    rel_V /= (v > 2.)?v:1.;

    P.V += rel_V*m;

    P.I += (dx.x*P0.V.y - dx.y*P0.V.x)*m;

    I += dot(dx, dx)*m;
  }

  if(P.M != 0.)
  {
    P.V /= P.M;
    P.I /= I;
  }
}

void
Simulation (sampler2D ch, sampler2D chG, inout particle P, vec2 pos)
{
  vec2 F = vec2(0.);
  float w = 0.;
  vec3 avgV = vec3(0.);

  float lU = pixel(chG, P.X).w;
  range(i, -2, 2) range(j, -2, 2)
  {
    vec2 tpos = pos + vec2(i,j);
    vec4 data = texel(ch, tpos);
    particle P0 = getParticle(data, tpos);
    vec2 dx = P0.X - P.X;
    float avgP = 0.5*P0.M*(Pf(P.M) + Pf(P0.M)); 

    F -= 0.5*G(1.*dx)*avgP*dx;

    float rU = pixel(chG, P0.X).w;

    F -= 0.0015*P.M*dx*clamp(lU - rU, -15., 15.)*G(1.*dx);
    avgV += G(1.*dx)*vec3(P0.V,1.);
  }

  avgV /= avgV.z;

  if(Mouse.z > 0.)
  {
    vec2 dm =(Mouse.xy - Mouse.zw)/10.; 
    float d = distance(Mouse.xy, P.X)/9.;
    F += 0.003*dm*exp(-d*d);
    // P.M.y += 0.1*exp(-40.*d*d);
  }

  P.V += F*dt/P.M;

  vec3 N = bN(P.X);
  float vdotN = step(N.z, border_h)*dot(-N.xy, P.V);
  P.V += 0.5*(N.xy*vdotN + N.xy*abs(vdotN));
  P.V += 2.*P.M*N.xy*exp(-abs(N.z));
  if(N.z < 5.) 
    P.V *= 0.;

  float v = length(P.V);
  P.V /= (v > 1.)?v:1.;

  P.I = P.M*clamp(P.I/P.M, -0.5, 0.5);
}
// glut_691_common.glsl

uniform vec2 iResolution;
uniform float iTime;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;

vec3
hsv2rgb (vec3 c)
{
  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
  rgb = rgb*rgb*(3.0-2.0*rgb);
  return c.z * mix( vec3(1.0), rgb, c.y);
}

vec3
mixN (vec3 a, vec3 b, float k)
{
  return sqrt(mix(a*a, b*b, clamp(k,0.,1.)));
}

vec4
V (vec2 p)
{
  return pixel(ch1, p);
}

void
main ()
{
  vec4 col;
  vec2 pos = gl_FragCoord.xy;

  R = iResolution.xy; time = iTime;
  ivec2 p = ivec2(pos);

  vec4 data = texel(ch0, pos);
  particle P = getParticle(data, pos);

  vec3 Nb = bN(P.X);
  float bord = smoothstep(2.*border_h,border_h*0.5,border(pos));

  vec4 rho = V(pos);
  rho.z *= 5.;
  vec3 dx = vec3(-3., 0., 3.);
  vec4 grad = -0.5*vec4(V(pos + dx.zy).zw - V(pos + dx.xy).zw,
                        V(pos + dx.yz).zw - V(pos + dx.yx).zw);
  vec2 N = pow(length(grad.xz),0.2)*normalize(grad.xz+1e-5);
  float specular = pow(max(dot(N, Dir(1.4)), 0.), 3.5);
  float specularb = G(0.4*(Nb.zz - border_h))*pow(max(dot(Nb.xy, Dir(1.4)), 0.), 3.);

  float a = pow(smoothstep(fluid_rho*0.5, fluid_rho*2., rho.z),0.1);

  col.xyz = 0.02*vec3(0.2, 0.5, 1.)*rho.w;
  col.xyz += vec3(1., 0.7, 0.5)*rho.z;

  col.xyz = tanh(col.xyz);
  //col.w = 1.;

  gl_FragColor = col;
}
