#version 130

// glut_717_common.glsl
// #define USE_CINEMATIC_MODE
// #define USE_BUMPY_STREAMS_MODE
// #define USE_GENERATION_SEED 123

const int nParticles = 20;
const float particlesSize = 8.0;
const float collisionDamping = 0.5;
const float streamsFadingExp = 0.001;
const float gravityStrength = 1.6 / particlesSize;

const vec3 ambientLightDir = normalize(vec3(1.0, 2.0, 0.0));
const vec3 ambientLightCol = vec3(1.1, 1.0, 0.9);
const vec3 backgroundColor = vec3(0.65);
const float streamsGlossExp = 120.0;
const float spotlightsGlare = 0.0;

#ifdef USE_BUMPY_STREAMS_MODE
#define particlesSize mix(particlesSize, particlesSize * 0.5, (1.0 + sin(1.85 + iTime * 11.93805208)) * 0.5)
#endif

#ifdef USE_GENERATION_SEED
#define generationSeed float(USE_GENERATION_SEED) // a fixed seed will generate the same output (in respect of the viewport size)
#else
#define generationSeed iDate.w // if no custom seed is provided, POSIX time is used instead (producing different results every time)
#endif

const ivec2 cameraVelocity =
#ifdef USE_CINEMATIC_MODE
ivec2(1, 0);
#else
ivec2(0);
#endif
// glut_717_common.glsl

uniform vec2 iResolution;
uniform sampler2D iChannel0;
uniform sampler2D iChannel1;
uniform sampler2D iChannel2;

vec2
getParticlePosition (int particleID)
{
  int iChannel0_width = textureSize (iChannel0, 0).x;
  ivec2 particleCoord = ivec2(particleID % iChannel0_width, particleID / iChannel0_width);

  return texelFetch(iChannel0, particleCoord, 0).xy;
}

vec3
computeLighting (vec3 surfaceAlbedo,
                 vec3 surfaceNormal,
                 float surfaceGloss,
                 vec3 lightCol,
                 vec3 lightDir,
                 float lightSpec,
                 float lightAmb)
{
  float dot_n  = clamp(dot(surfaceNormal, lightDir), 0.0, 1.0);

  vec3 diffuse  = lightCol * surfaceAlbedo * clamp(dot_n, lightAmb, 1.0);
  vec3 specular = lightCol * float(dot_n > 0.0) * pow(clamp(dot(reflect(-lightDir, surfaceNormal), vec3(0.0, 0.0, 1.0)), 0.0, 1.0), surfaceGloss);

  return diffuse + specular * lightSpec;
}

vec3
computeSpotLight (vec3 surfaceAlbedo,
                  vec3 surfaceNormal,
                  float surfaceGloss,
                  vec3 surfacePos,  
                  vec3 lightCol,
                  vec3 lightPos,
                  float lightRadius)
{
  vec3 lightVec = lightPos - surfacePos;
  float contribution = 1.0 / max(dot(lightVec, lightVec) * 0.08 / (lightRadius * lightRadius), 1.0);

  return computeLighting(surfaceAlbedo, surfaceNormal, surfaceGloss, lightCol, normalize(lightVec), 0.066667 * surfaceGloss, 0.0) * contribution;
}

vec3
computeLightGlow (vec3 position, vec3 lightCol, vec3 lightPos, float lightRadius)
{
  vec3 glare = spotlightsGlare * lightCol * smoothstep(lightRadius * 10.0, 0.0, length((lightPos.xy - position.xy) * vec2(1.0, 16.0)));
  vec3 innerGlow = vec3(0.8) * smoothstep(lightRadius, lightRadius * 0.5, distance(lightPos.xy, position.xy));
  vec3 outerGlow = 0.25 * lightCol * smoothstep(lightRadius * 2.5, 0.0, distance(lightPos.xy, position.xy));

  return innerGlow + outerGlow + glare;
}

vec3
computeVignetting (vec2 fragCoord, vec3 src)
{
  vec2 coord = ((fragCoord.xy / iResolution.xy) - 0.5) * (iResolution.x / iResolution.y) * 2.0;
  float rf = sqrt(dot(coord, coord)) * 0.25;
  float rf2_1 = rf * rf + 1.0;

  return src * pow((1.0 / (rf2_1 * rf2_1)), 2.24);
}    

void
main ()
{
  vec4 albedo = texelFetch(iChannel1, ivec2(gl_FragCoord.xy), 0);
  vec3 normal = normalize(texelFetch(iChannel2, ivec2(gl_FragCoord.xy), 0).xyz);
  vec3 position = vec3(gl_FragCoord.xy, -(1.0 - albedo.a) * 384.0 / particlesSize);

  gl_FragColor = vec4(vec3(0.0), albedo.a); 
  gl_FragColor.rgb += computeLighting(albedo.rgb, normal, streamsGlossExp, ambientLightCol, ambientLightDir, 0.5, 0.175);

  for(int i = 0; i < nParticles; ++i)
  {
    vec3 particlePos = vec3(getParticlePosition(i), 0.0);
    vec3 particleCol = texelFetch(iChannel1, ivec2(particlePos.xy), 0).rgb;

    gl_FragColor.rgb += computeSpotLight(albedo.rgb, normal, streamsGlossExp, position, particleCol, particlePos, particlesSize);
  }
    
  gl_FragColor.rgb = 1.25 * gl_FragColor.rgb - vec3(0.075);
  gl_FragColor.rgb = mix(backgroundColor, gl_FragColor.rgb, min(gl_FragColor.a * 1.125, 1.0));
  gl_FragColor.rgb = computeVignetting(gl_FragCoord.xy, gl_FragColor.rgb);

  for(int i = 0; i < nParticles; ++i)
  {
    vec3 particlePos = vec3(getParticlePosition(i), 0.0);
    vec3 particleCol = texelFetch(iChannel1, ivec2(particlePos.xy), 0).rgb;

    gl_FragColor.rgb += computeLightGlow(position, particleCol, particlePos, particlesSize);
  }

  gl_FragColor = vec4(pow(gl_FragColor.rgb, vec3(1.0 / 2.24)), 1.0);
}
