#version 130

// glut_802_common.glsl
#define R iResolution.xy
#define ss(a,b,t) smoothstep(a,b,t)
#define N normalize
#define T(uv) texture(iChannel0, uv).r

float
hash11 (float p)
{
  p = fract(p * .1031);
  p *= p + 33.33;
  p *= p + p;
  return fract(p);
}

float
hash13 (vec3 p3)
{
  p3  = fract(p3 * .1031);
  p3 += dot(p3, p3.zyx + 31.32);
  return fract((p3.x + p3.y) * p3.z);
}

vec2
hash23 (vec3 p3)
{
  p3 = fract(p3 * vec3(.1031, .1030, .0973));
  p3 += dot(p3, p3.yzx+33.33);
  return fract((p3.xx+p3.yz)*p3.zy);
}

float
gyroid (vec3 seed)
{
  return dot(sin(seed),cos(seed.yzx));
}
// glut_802_common.glsl

uniform vec2 iResolution;
uniform int iFrame;
uniform vec4 iMouse;
uniform sampler2D iChannel0;

void
main ()
{
  vec2 uv = gl_FragCoord.xy/iResolution.xy;

  vec4 data = texture(iChannel0, uv);

  vec3 color = .5+.5*cos(vec3(1,2,3)*5. + data.r*5.+4.);
  color = mix(color, vec3(1), uv.y*.5);

  float rng = hash13(vec3(gl_FragCoord.xy, iFrame));
  vec3 unit = vec3(vec2(.05*rng), 0.);
  vec3 normal = normalize(vec3(T(uv-unit.xz)-T(uv+unit.xz),
                               T(uv-unit.zy)-T(uv+unit.zy),
                               unit.y));

  float light = dot(normal, N(vec3(0,-4,1)))*.5+.5;
  color += light;

  color *= data.r;

  gl_FragColor = vec4(color, 1);

  if (iMouse.z > 0. && iMouse.x/R.x < .2)
  {
    if (uv.x > .66) gl_FragColor = vec4(normal*.5+.5, 1);
    else if (uv.x > .33)
      gl_FragColor = vec4(vec3(sin(data.r * 6.28 * 2.) * .5 + .5), 1);
    else
      gl_FragColor = vec4(data.yz * .5 + .5, .5, 1);
  }
}
